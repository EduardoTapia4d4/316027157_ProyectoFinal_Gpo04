#include <iostream>
#include <cmath>

// GLEW
#include <GL/glew.h>

// GLFW
#include <GLFW/glfw3.h>

// Other Libs
#include "stb_image.h"

// GLM Mathematics
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

//Load Models
#include "SOIL2/SOIL2.h"


// Other includes
#include "Shader.h"
#include "Camera.h"
#include "Model.h"

// Function prototypes
void KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mode);
void MouseCallback(GLFWwindow* window, double xPos, double yPos);
void DoMovement();

// Window dimensions
const GLuint WIDTH = 800, HEIGHT = 600;
int SCREEN_WIDTH, SCREEN_HEIGHT;

// Camera
Camera camera(glm::vec3(-1.0f, 2.0f, 15.0f));
GLfloat lastX = WIDTH / 2.0;
GLfloat lastY = HEIGHT / 2.0;

bool keys[1024];
bool firstMouse = true;
// Light attributes
glm::vec3 lightPos(0.0f, 0.0f, 0.0f);

//Control de luces
bool active;

//Variables para la animaciones sencillas
//0.- Puertas de entrada
bool animS1 = false;		//Activación
bool openD = false;			//Estado de puertas: abiertas
bool closeD = true;			//Estado de puertas: cerradas
float rotP1 = 0.0f;			//Rotación: puerta entrada
float rotP2 = 0.0f;			//Rotación: puerta habitación

//1.- Apertura del closet
bool animS2 = false;		//Activación
bool openR = false;			//Estado de puerta: abierta
bool closeR = true;			//Estado de puerta: cerrada
float rotR = 90.0f;			//Rotación: puerta del closet
float posX_R = -6.6f;		//Posición en X: c aja de zapatos
float posY_R = 3.01f;		//Posición en Y: caja de zapatos
bool rec1 = true;			//Recorrido 1: caja de zapatos
bool rec2 = false;			//Recorrido 2: caja de zapatos
bool rec3 = false;			//Recorrido 3: caja de zapatos
bool recR1 = true;			//Recorrido 4: caja de zapatos
bool recR2 = false;			//Recorrido 5: caja de zapatos
bool recR3 = false;			//Recorrido 6: caja de zapatos

//2.- Bandeja del estereo
bool animS3 = false;		//Activación
bool openRad = false;		//Estado de bandeja: abierta
bool closeRad = true;		//Estado de bandeja: cerrada
float rad_X = -3.285f;		//Posición en X: bandeja estereo
float disc_X = -3.417f;		//Posición en X: disco
float disc_rot = 0;			//Rotación: disco

//3.- Cajonera
bool animS4 = false;		//Activación
bool openCom = false;		//Estado del cajón: abierta
bool closeCom = true;		//Estado del cajón: cerrada
float posX_Cajon = -6.377f;	//Posición en X: cajón

//Variables para la animaciones complejas
//1.- Pelota que rueda
bool animC1 = false;		//Activación
bool P_rec1 = true;			//Estado del recorrido: primera parte
bool P_rec2 = false;		//Estado del recorrido: segunda parte
//Arreglo de posiciones en Y para la animación por KeyFrames
float movPY[2090] = { 1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.908,1.90789,1.90779,1.90768,1.90758,1.90747,1.90737,1.90726,1.90716,1.90705,1.90695,1.90684,1.90674,1.90663,1.90653,1.90642,1.90632,1.90621,1.90611,1.906,1.90589,1.90579,1.90568,1.90558,1.90547,1.90537,1.90526,1.90516,1.90505,1.90495,1.90484,1.90474,1.90463,1.90453,1.90442,1.90432,1.90421,1.90411,1.904,1.90389,1.90379,1.90368,1.90358,1.90347,1.90337,1.90326,1.90316,1.90305,1.90295,1.90284,1.90274,1.90263,1.90253,1.90242,1.90232,1.90221,1.90211,1.902,1.90189,1.90179,1.90168,1.90158,1.90147,1.90137,1.90126,1.90116,1.90105,1.90095,1.90084,1.90074,1.90063,1.90053,1.90042,1.90032,1.90021,1.90011,1.9,1.89989,1.89979,1.89968,1.89958,1.89947,1.89937,1.89926,1.89916,1.89905,1.89895,1.89884,1.89874,1.89863,1.89853,1.89842,1.89832,1.89821,1.89811,1.898,1.89789,1.89779,1.89768,1.89758,1.89747,1.89737,1.89726,1.89716,1.89705,1.89695,1.89684,1.89674,1.89663,1.89653,1.89642,1.89632,1.89621,1.89611,1.896,1.89589,1.89579,1.89568,1.89558,1.89547,1.89537,1.89526,1.89516,1.89505,1.89495,1.89484,1.89474,1.89463,1.89453,1.89442,1.89432,1.89421,1.89411,1.894,1.89389,1.89379,1.89368,1.89358,1.89347,1.89337,1.89326,1.89316,1.89305,1.89295,1.89284,1.89274,1.89263,1.89253,1.89242,1.89232,1.89221,1.89211,1.892,1.89189,1.89179,1.89168,1.89158,1.89147,1.89137,1.89126,1.89116,1.89105,1.89095,1.89084,1.89074,1.89063,1.89053,1.89042,1.89032,1.89021,1.89011,1.89,1.88989,1.88979,1.88968,1.88958,1.88947,1.88937,1.88926,1.88916,1.88905,1.88895,1.88884,1.88874,1.88863,1.88853,1.88842,1.88832,1.88821,1.88811,1.888,1.8877,1.8874,1.8871,1.8868,1.8865,1.8862,1.8859,1.8856,1.8853,1.885,1.8847,1.8844,1.8841,1.8838,1.8835,1.8832,1.8829,1.8826,1.8823,1.882,1.8817,1.8814,1.8811,1.8808,1.8805,1.8802,1.8799,1.8796,1.8793,1.879,1.8787,1.8784,1.8781,1.8778,1.8775,1.8772,1.8769,1.8766,1.8763,1.876,1.8757,1.8754,1.8751,1.8748,1.8745,1.8742,1.8739,1.8736,1.8733,1.873,1.8727,1.8724,1.8721,1.8718,1.8715,1.8712,1.8709,1.8706,1.8703,1.87,1.8697,1.8694,1.8691,1.8688,1.8685,1.8682,1.8679,1.8676,1.8673,1.867,1.8667,1.8664,1.8661,1.8658,1.8655,1.8652,1.8649,1.8646,1.8643,1.864,1.8637,1.8634,1.8631,1.8628,1.8625,1.8622,1.8619,1.8616,1.8613,1.861,1.8607,1.8604,1.8601,1.8598,1.8595,1.8592,1.8589,1.8586,1.8583,1.858,1.8577,1.8574,1.8571,1.8568,1.8565,1.85619,1.85589,1.85559,1.85529,1.85499,1.85469,1.85439,1.85409,1.85379,1.85349,1.85319,1.85289,1.85259,1.85229,1.85199,1.85169,1.85139,1.85109,1.85079,1.85049,1.85019,1.84989,1.84959,1.84929,1.84899,1.84869,1.84839,1.84809,1.84779,1.84749,1.84719,1.84689,1.84659,1.84629,1.84599,1.84569,1.84539,1.84509,1.84479,1.84449,1.84419,1.84389,1.84359,1.84329,1.84299,1.84269,1.84239,1.84209,1.84179,1.84149,1.84119,1.84089,1.84059,1.84029,1.83999,1.83969,1.83939,1.83909,1.83879,1.83849,1.83819,1.83789,1.83759,1.83729,1.83699,1.83669,1.83639,1.83609,1.83579,1.83549,1.83519,1.83489,1.83459,1.83429,1.83399,1.83369,1.83339,1.83309,1.83279,1.83249,1.83219,1.83189,1.83159,1.83129,1.83099,1.83049,1.82999,1.82949,1.82899,1.82849,1.82799,1.82749,1.82699,1.82649,1.82599,1.82549,1.82499,1.82449,1.82399,1.82349,1.82299,1.82249,1.82199,1.82149,1.82099,1.82049,1.81999,1.81949,1.81899,1.81849,1.81799,1.81749,1.81699,1.81649,1.81599,1.81549,1.81499,1.81449,1.81399,1.81349,1.81299,1.81249,1.81199,1.81149,1.81099,1.81049,1.80999,1.80949,1.80899,1.80849,1.80799,1.80749,1.80699,1.80649,1.80599,1.80549,1.80499,1.80449,1.80399,1.80349,1.80299,1.80249,1.80199,1.80149,1.80099,1.80049,1.79999,1.79949,1.79899,1.79849,1.79799,1.79749,1.79699,1.79649,1.79599,1.79549,1.79499,1.79449,1.79399,1.79349,1.79299,1.79249,1.79199,1.79149,1.79099,1.79049,1.78999,1.78949,1.78899,1.78849,1.78799,1.78749,1.78699,1.78649,1.78599,1.78549,1.78499,1.78449,1.78399,1.78349,1.78299,1.78249,1.78199,1.78149,1.78099,1.78049,1.77999,1.77949,1.77899,1.77849,1.77799,1.77749,1.77699,1.77649,1.77599,1.77549,1.77499,1.77449,1.77399,1.77349,1.77299,1.7725,1.772,1.7715,1.771,1.7705,1.77,1.7695,1.769,1.7685,1.768,1.7675,1.767,1.7665,1.766,1.7655,1.765,1.7645,1.764,1.7635,1.763,1.7625,1.762,1.7615,1.761,1.7605,1.76,1.7595,1.759,1.7585,1.758,1.7575,1.757,1.7565,1.756,1.7555,1.755,1.7545,1.754,1.7535,1.753,1.7525,1.752,1.7515,1.751,1.7505,1.75,1.7495,1.749,1.7485,1.748,1.7475,1.747,1.7465,1.746,1.7455,1.745,1.7445,1.744,1.7435,1.743,1.7425,1.742,1.7415,1.741,1.7405,1.74,1.7395,1.739,1.7385,1.738,1.7375,1.737,1.7365,1.736,1.73529,1.73459,1.73388,1.73318,1.73247,1.73177,1.73106,1.73036,1.72965,1.72895,1.72824,1.72753,1.72683,1.72612,1.72542,1.72471,1.72401,1.7233,1.7226,1.72189,1.72119,1.72048,1.71978,1.71907,1.71837,1.71766,1.71696,1.71625,1.71555,1.71484,1.71414,1.71343,1.71272,1.71202,1.71131,1.71061,1.7099,1.7092,1.70849,1.70779,1.70708,1.70638,1.70567,1.70497,1.70426,1.70356,1.70285,1.70215,1.70144,1.70074,1.70003,1.69933,1.69862,1.69791,1.69721,1.6965,1.6958,1.69509,1.69439,1.69368,1.69298,1.69227,1.69157,1.69086,1.69016,1.68945,1.68875,1.68804,1.68734,1.68663,1.68593,1.68522,1.68451,1.68381,1.6831,1.6824,1.68169,1.68099,1.68028,1.67958,1.67887,1.67817,1.67746,1.67676,1.67605,1.67535,1.67464,1.67394,1.67323,1.67253,1.67182,1.67112,1.67041,1.6697,1.669,1.66829,1.66759,1.66688,1.66618,1.66547,1.66477,1.66406,1.66336,1.66265,1.66195,1.66124,1.66054,1.65983,1.65913,1.65842,1.65772,1.65701,1.65631,1.6556,1.65489,1.65419,1.65348,1.65278,1.65207,1.65137,1.65066,1.64996,1.64925,1.64855,1.64784,1.64714,1.64643,1.64573,1.64502,1.64432,1.64361,1.64291,1.6422,1.6415,1.64079,1.64008,1.63938,1.63867,1.63797,1.63726,1.63656,1.63585,1.63515,1.63444,1.63374,1.63303,1.63233,1.63162,1.63092,1.63021,1.62951,1.6288,1.6281,1.62739,1.62669,1.62598,1.62527,1.62457,1.62386,1.62316,1.62245,1.62175,1.62104,1.62034,1.61963,1.61893,1.61822,1.61752,1.61681,1.61611,1.6154,1.6147,1.61399,1.61329,1.61258,1.61188,1.61117,1.61046,1.60976,1.60905,1.60835,1.60764,1.60694,1.60623,1.60553,1.60482,1.60412,1.60341,1.60271,1.602,1.6011,1.6002,1.5993,1.5984,1.5975,1.5966,1.5957,1.5948,1.5939,1.593,1.5921,1.5912,1.5903,1.5894,1.5885,1.5876,1.5867,1.5858,1.5849,1.584,1.5831,1.5822,1.5813,1.5804,1.5795,1.5786,1.5777,1.5768,1.5759,1.575,1.5741,1.5732,1.5723,1.5714,1.5705,1.5696,1.5687,1.5678,1.5669,1.566,1.5651,1.5642,1.5633,1.5624,1.5615,1.5606,1.5597,1.5588,1.5579,1.557,1.5561,1.5552,1.5543,1.5534,1.5525,1.5516,1.5507,1.5498,1.5489,1.548,1.5471,1.5462,1.5453,1.5444,1.5435,1.5426,1.5417,1.5408,1.5399,1.539,1.5381,1.5372,1.5363,1.5354,1.5345,1.5336,1.5327,1.5318,1.5309,1.53,1.5291,1.5282,1.5273,1.5264,1.5255,1.5246,1.5237,1.5228,1.5219,1.521,1.5201,1.5192,1.5183,1.5174,1.5165,1.5156,1.5147,1.5138,1.5129,1.512,1.5111,1.5102,1.5093,1.5084,1.5075,1.5066,1.5057,1.5048,1.5039,1.503,1.5021,1.5012,1.5003,1.4994,1.4985,1.4976,1.4967,1.4958,1.4949,1.494,1.4931,1.4922,1.4913,1.4904,1.4895,1.4886,1.4877,1.4868,1.4859,1.485,1.4841,1.4832,1.4823,1.4814,1.4805,1.4796,1.4787,1.4778,1.4769,1.476,1.4751,1.4742,1.4733,1.4724,1.4715,1.4706,1.4697,1.4688,1.4679,1.467,1.4661,1.4652,1.4643,1.4634,1.4625,1.4616,1.4607,1.4598,1.4589,1.458,1.4571,1.4562,1.4553,1.4544,1.4535,1.4526,1.4517,1.4508,1.4499,1.449,1.4481,1.4472,1.4463,1.4454,1.4445,1.4436,1.4427,1.4418,1.4409,1.44,1.4391,1.4382,1.4373,1.4364,1.4355,1.4346,1.4337,1.4328,1.4319,1.431,1.42989,1.42879,1.42768,1.42657,1.42547,1.42436,1.42326,1.42215,1.42105,1.41994,1.41884,1.41773,1.41663,1.41552,1.41442,1.41331,1.41221,1.4111,1.41,1.40889,1.40778,1.40668,1.40557,1.40447,1.40336,1.40226,1.40115,1.40005,1.39894,1.39784,1.39673,1.39563,1.39452,1.39342,1.39231,1.3912,1.3901,1.38899,1.38789,1.38678,1.38568,1.38457,1.38347,1.38236,1.38126,1.38015,1.37905,1.37794,1.37684,1.37573,1.37463,1.37352,1.37241,1.37131,1.3702,1.3691,1.36799,1.36689,1.36578,1.36468,1.36357,1.36247,1.36136,1.36026,1.35915,1.35805,1.35694,1.35583,1.35473,1.35362,1.35252,1.35141,1.35031,1.3492,1.3481,1.34699,1.34589,1.34478,1.34368,1.34257,1.34147,1.34036,1.33926,1.33815,1.33704,1.33594,1.33483,1.33373,1.33262,1.33152,1.33041,1.32931,1.3282,1.3271,1.32599,1.32489,1.32378,1.32268,1.32157,1.32047,1.31936,1.31825,1.31715,1.31604,1.31494,1.31383,1.31273,1.31162,1.31052,1.30941,1.30831,1.3072,1.3061,1.30499,1.30389,1.30278,1.30167,1.30057,1.29946,1.29836,1.29725,1.29615,1.29504,1.29394,1.29283,1.29173,1.29062,1.28952,1.28841,1.28731,1.2862,1.2851,1.28399,1.28288,1.28178,1.28067,1.27957,1.27846,1.27736,1.27625,1.27515,1.27404,1.27294,1.27183,1.27073,1.26962,1.26852,1.26741,1.2663,1.2652,1.26409,1.26299,1.26188,1.26078,1.25967,1.25857,1.25746,1.25636,1.25525,1.25415,1.25304,1.25194,1.25083,1.24973,1.24862,1.24751,1.24641,1.2453,1.2442,1.24309,1.24199,1.24088,1.23978,1.23867,1.23757,1.23646,1.23536,1.23425,1.23315,1.23204,1.23094,1.22983,1.22872,1.22762,1.22651,1.22541,1.2243,1.2232,1.22209,1.22099,1.21968,1.21838,1.21707,1.21577,1.21446,1.21316,1.21185,1.21055,1.20924,1.20794,1.20663,1.20532,1.20402,1.20271,1.20141,1.2001,1.1988,1.19749,1.19619,1.19488,1.19358,1.19227,1.19097,1.18966,1.18836,1.18705,1.18575,1.18444,1.18314,1.18183,1.18053,1.17922,1.17791,1.17661,1.1753,1.174,1.17269,1.17139,1.17008,1.16878,1.16747,1.16617,1.16486,1.16356,1.16225,1.16095,1.15964,1.15834,1.15703,1.15573,1.15442,1.15312,1.15181,1.15051,1.1492,1.14789,1.14659,1.14528,1.14398,1.14267,1.14137,1.14006,1.13876,1.13745,1.13615,1.13484,1.13354,1.13223,1.13093,1.12962,1.12832,1.12701,1.12571,1.1244,1.1231,1.12179,1.12049,1.11918,1.11787,1.11657,1.11526,1.11396,1.11265,1.11135,1.11004,1.10874,1.10743,1.10613,1.10482,1.10352,1.10221,1.10091,1.0996,1.0983,1.09699,1.09569,1.09438,1.09308,1.09177,1.09047,1.08916,1.08785,1.08655,1.08524,1.08394,1.08263,1.08133,1.08002,1.07872,1.07741,1.07611,1.0748,1.0735,1.07219,1.07089,1.06958,1.06828,1.06697,1.06567,1.06436,1.06306,1.06175,1.06044,1.05914,1.05783,1.05653,1.05522,1.05392,1.05261,1.05131,1.05,1.0487,1.04739,1.04609,1.04478,1.04348,1.04217,1.04087,1.03956,1.03826,1.03695,1.03565,1.03434,1.03304,1.03173,1.03042,1.02912,1.02781,1.02651,1.0252,1.0239,1.02259,1.02129,1.01998,1.01868,1.01737,1.01607,1.01476,1.01346,1.01215,1.01085,1.00954,1.00824,1.00693,1.00563,1.00432,1.00302,1.00171,1.0004,0.999099,0.997794,0.996489,0.995184,0.993878,0.992573,0.991268,0.989962,0.988657,0.987352,0.986047,0.984741,0.983436,0.982131,0.980825,0.97952,0.978215,0.97691,0.975604,0.974299,0.972994,0.971746,0.970499,0.969252,0.968004,0.966757,0.96551,0.964262,0.963015,0.961768,0.96052,0.959273,0.958026,0.956778,0.955531,0.954284,0.953036,0.951789,0.950542,0.949294,0.948047,0.9468,0.945552,0.944305,0.943057,0.94181,0.940563,0.939315,0.938068,0.936821,0.935573,0.934326,0.933079,0.931831,0.930584,0.929337,0.928089,0.926842,0.925595,0.924347,0.9231,0.921853,0.920605,0.919358,0.918111,0.916863,0.915616,0.914369,0.913121,0.911874,0.910626,0.909379,0.908132,0.906884,0.905637,0.90439,0.903142,0.901895,0.900648,0.8994,0.898153,0.896906,0.895658,0.894411,0.893164,0.891916,0.890669,0.889422,0.888174,0.886927,0.88568,0.884432,0.883185,0.881938,0.88069,0.879443,0.878195,0.876948,0.875701,0.874453,0.873206,0.871959,0.870711,0.869464,0.868217,0.866969,0.865722,0.864475,0.863227,0.86198,0.860733,0.859485,0.858238,0.856991,0.855743,0.854496,0.853249,0.852001,0.850754,0.849506,0.848259,0.847012,0.845764,0.844517,0.84327,0.842022,0.840775,0.839528,0.83828,0.837033,0.835786,0.834538,0.833291,0.832044,0.830796,0.829549,0.828302,0.827054,0.825807,0.82456,0.823312,0.822065,0.820818,0.81957,0.818323,0.817075,0.815828,0.814581,0.813333,0.812086,0.810839,0.809591,0.808344,0.807097,0.805849,0.804602,0.803355,0.802107,0.80086,0.799613,0.798365,0.797118,0.795871,0.794623,0.793376,0.792129,0.790881,0.789634,0.788387,0.787139,0.785892,0.784644,0.783397,0.78215,0.780902,0.779655,0.778408,0.77716,0.775913,0.774666,0.773418,0.772171,0.770924,0.769676,0.768429,0.767182,0.765934,0.764687,0.76344,0.762192,0.760945,0.759698,0.75845,0.757203,0.755956,0.754708,0.753461,0.752213,0.750966,0.749719,0.748471,0.747224,0.745977,0.744729,0.743482,0.742235,0.740987,0.73974,0.738493,0.737245,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998,0.735998};
//Arreglo de posiciones en Z para la animación por KeyFrames
float movPZ[2090] = { 7.68086,7.68073,7.68059,7.68045,7.68032,7.68018,7.68004,7.67991,7.67977,7.67963,7.67949,7.67936,7.67922,7.67908,7.67895,7.67881,7.67867,7.67854,7.6784,7.67826,7.67813,7.67799,7.67785,7.67772,7.67758,7.67744,7.67731,7.67717,7.67703,7.67689,7.67676,7.67662,7.67648,7.67635,7.67621,7.67607,7.67594,7.6758,7.67566,7.67553,7.67539,7.67525,7.67512,7.67498,7.67484,7.67471,7.67457,7.67443,7.67429,7.67416,7.67402,7.67388,7.67375,7.67361,7.67347,7.67334,7.6732,7.67306,7.67293,7.67279,7.67265,7.67252,7.67238,7.67224,7.6721,7.67197,7.67183,7.67169,7.67156,7.67142,7.67128,7.67115,7.67101,7.67087,7.67074,7.6706,7.67046,7.67033,7.67019,7.67005,7.66992,7.66978,7.66964,7.6695,7.66937,7.66923,7.66909,7.66896,7.66882,7.66868,7.66855,7.66841,7.66827,7.66814,7.668,7.66786,7.66773,7.66759,7.66745,7.66732,7.66718,7.66704,7.6669,7.66677,7.66663,7.66649,7.66636,7.66622,7.66608,7.66595,7.66581,7.66567,7.66554,7.6654,7.66526,7.66513,7.66499,7.66485,7.66471,7.66458,7.66444,7.6643,7.66417,7.66403,7.66389,7.66376,7.66362,7.66348,7.66335,7.66321,7.66307,7.66294,7.6628,7.66266,7.66253,7.66239,7.66225,7.66211,7.66198,7.66184,7.6617,7.66157,7.66143,7.66129,7.66116,7.66102,7.66088,7.66075,7.66061,7.66047,7.66034,7.6602,7.66006,7.65992,7.65979,7.65965,7.65951,7.65938,7.65924,7.6591,7.65897,7.65883,7.65869,7.65856,7.65842,7.65828,7.65815,7.65801,7.65787,7.65774,7.6576,7.65746,7.65732,7.65719,7.65705,7.65691,7.65678,7.65664,7.6565,7.65637,7.65623,7.65609,7.65596,7.65582,7.65568,7.65555,7.65541,7.65527,7.65514,7.655,7.6548,7.65461,7.65441,7.65422,7.65403,7.65383,7.65364,7.65344,7.65325,7.65305,7.65286,7.65266,7.65247,7.65227,7.65208,7.65189,7.65169,7.6515,7.6513,7.65111,7.65091,7.65072,7.65052,7.65033,7.65013,7.64994,7.64975,7.64955,7.64936,7.64916,7.64897,7.64877,7.64858,7.64838,7.64819,7.64799,7.6478,7.64761,7.64741,7.64722,7.64702,7.64683,7.64663,7.64644,7.64624,7.64605,7.64585,7.64566,7.64547,7.64527,7.64508,7.64488,7.64469,7.64449,7.6443,7.6441,7.64391,7.64371,7.64352,7.64333,7.64313,7.64294,7.64274,7.64255,7.64235,7.64216,7.64196,7.64177,7.64157,7.64138,7.64119,7.64099,7.6408,7.6406,7.64041,7.64021,7.64002,7.63982,7.63963,7.63943,7.63924,7.63905,7.63885,7.63866,7.63846,7.63827,7.63807,7.63788,7.63768,7.63749,7.63729,7.6371,7.63691,7.63671,7.63652,7.63632,7.63613,7.63593,7.63574,7.63554,7.63535,7.63515,7.63496,7.63477,7.63457,7.63438,7.63418,7.63399,7.63379,7.6336,7.6334,7.63321,7.63301,7.63282,7.63263,7.63243,7.63224,7.63204,7.63185,7.63165,7.63146,7.63126,7.63107,7.63087,7.63068,7.63049,7.63029,7.6301,7.6299,7.62971,7.62951,7.62932,7.62912,7.62893,7.62873,7.62854,7.62835,7.62815,7.62796,7.62776,7.62757,7.62737,7.62718,7.62698,7.62679,7.62659,7.6264,7.6262,7.62601,7.62582,7.62562,7.62543,7.62523,7.62504,7.62484,7.62465,7.62445,7.62426,7.62406,7.62387,7.62368,7.62348,7.62329,7.62309,7.6229,7.6227,7.62251,7.62231,7.62212,7.62192,7.62173,7.62154,7.62134,7.62115,7.62095,7.62076,7.62056,7.62037,7.62017,7.61998,7.61978,7.61959,7.6194,7.6192,7.61901,7.61881,7.61862,7.61842,7.61823,7.61803,7.61771,7.61738,7.61706,7.61673,7.6164,7.61608,7.61575,7.61542,7.6151,7.61477,7.61445,7.61412,7.61379,7.61347,7.61314,7.61282,7.61249,7.61216,7.61184,7.61151,7.61118,7.61086,7.61053,7.61021,7.60988,7.60955,7.60923,7.6089,7.60858,7.60825,7.60792,7.6076,7.60727,7.60694,7.60662,7.60629,7.60597,7.60564,7.60531,7.60499,7.60466,7.60434,7.60401,7.60368,7.60336,7.60303,7.6027,7.60238,7.60205,7.60173,7.6014,7.60107,7.60075,7.60042,7.6001,7.59977,7.59944,7.59912,7.59879,7.59846,7.59814,7.59781,7.59749,7.59716,7.59683,7.59651,7.59618,7.59586,7.59553,7.5952,7.59488,7.59455,7.59422,7.5939,7.59357,7.59325,7.59292,7.59259,7.59227,7.59194,7.59162,7.59129,7.59096,7.59064,7.59031,7.58998,7.58966,7.58933,7.58901,7.58868,7.58835,7.58803,7.5877,7.58738,7.58705,7.58672,7.5864,7.58607,7.58574,7.58542,7.58509,7.58477,7.58444,7.58411,7.58379,7.58346,7.58314,7.58281,7.58248,7.58216,7.58183,7.5815,7.58118,7.58085,7.58053,7.5802,7.57987,7.57955,7.57922,7.5789,7.57857,7.57824,7.57792,7.57759,7.57726,7.57694,7.57661,7.57629,7.57596,7.57563,7.57531,7.57498,7.57466,7.57433,7.574,7.57368,7.57335,7.57302,7.5727,7.57237,7.57205,7.57172,7.57139,7.57107,7.57074,7.57042,7.57009,7.56976,7.56944,7.56911,7.56878,7.56846,7.56813,7.56781,7.56748,7.56715,7.56683,7.5665,7.56617,7.56585,7.56552,7.5652,7.56487,7.56454,7.56422,7.56389,7.56357,7.56324,7.56291,7.56259,7.56226,7.56193,7.56161,7.56128,7.56096,7.56063,7.5603,7.55998,7.55965,7.55933,7.559,7.55867,7.55835,7.55802,7.55769,7.55737,7.55704,7.55672,7.55639,7.55606,7.55573,7.5554,7.55507,7.55474,7.55441,7.55408,7.55374,7.55341,7.55308,7.55275,7.55242,7.55209,7.55176,7.55142,7.55109,7.55076,7.55043,7.5501,7.54977,7.54944,7.5491,7.54877,7.54844,7.54811,7.54778,7.54745,7.54712,7.54678,7.54645,7.54612,7.54579,7.54546,7.54513,7.5448,7.54447,7.54413,7.5438,7.54347,7.54314,7.54281,7.54248,7.54215,7.54181,7.54148,7.54115,7.54082,7.54049,7.54016,7.53983,7.53949,7.53916,7.53883,7.5385,7.53817,7.53784,7.53751,7.53717,7.53684,7.53651,7.53618,7.53585,7.53552,7.53519,7.53485,7.53452,7.53419,7.53386,7.53353,7.5332,7.53287,7.53253,7.5322,7.53187,7.53154,7.53121,7.53088,7.53055,7.53021,7.52988,7.52955,7.52922,7.52889,7.52856,7.52823,7.52789,7.52756,7.52723,7.5269,7.52657,7.52624,7.52591,7.52558,7.52524,7.52491,7.52458,7.52425,7.52392,7.52359,7.52326,7.52292,7.52259,7.52226,7.52193,7.5216,7.52127,7.52094,7.5206,7.52027,7.51994,7.51961,7.51928,7.51895,7.51862,7.51828,7.51795,7.51762,7.51729,7.51696,7.51663,7.5163,7.51596,7.51563,7.5153,7.51497,7.51464,7.51431,7.51398,7.51364,7.51331,7.51298,7.51265,7.51232,7.51199,7.51166,7.51132,7.51099,7.51066,7.51033,7.51,7.50967,7.50934,7.50901,7.50867,7.50834,7.50801,7.50768,7.50735,7.50702,7.50669,7.50635,7.50602,7.50569,7.50536,7.50503,7.5047,7.50437,7.50403,7.5037,7.50337,7.50304,7.50271,7.50238,7.50205,7.50171,7.50138,7.50105,7.50072,7.50039,7.50006,7.49973,7.49939,7.49906,7.49873,7.4984,7.49807,7.49774,7.49741,7.49707,7.49674,7.49641,7.49608,7.49575,7.49542,7.49509,7.49475,7.49442,7.49409,7.49376,7.49343,7.4931,7.49277,7.49245,7.49212,7.49179,7.49147,7.49114,7.49081,7.49049,7.49016,7.48984,7.48951,7.48918,7.48886,7.48853,7.48821,7.48788,7.48755,7.48723,7.4869,7.48657,7.48625,7.48592,7.4856,7.48527,7.48494,7.48462,7.48429,7.48397,7.48364,7.48331,7.48299,7.48266,7.48233,7.48201,7.48168,7.48136,7.48103,7.4807,7.48038,7.48005,7.47973,7.4794,7.47907,7.47875,7.47842,7.47809,7.47777,7.47744,7.47712,7.47679,7.47646,7.47614,7.47581,7.47549,7.47516,7.47483,7.47451,7.47418,7.47385,7.47353,7.4732,7.47288,7.47255,7.47222,7.4719,7.47157,7.47125,7.47092,7.47059,7.47027,7.46994,7.46961,7.46929,7.46896,7.46864,7.46831,7.46798,7.46766,7.46733,7.46701,7.46668,7.46635,7.46603,7.4657,7.46537,7.46505,7.46472,7.4644,7.46407,7.46374,7.46342,7.46309,7.46277,7.46244,7.46211,7.46179,7.46146,7.46113,7.46081,7.46048,7.46016,7.45983,7.4595,7.45918,7.45885,7.45853,7.4582,7.45787,7.45755,7.45722,7.45689,7.45657,7.45624,7.45592,7.45559,7.45526,7.45494,7.45461,7.45429,7.45396,7.45363,7.45331,7.45298,7.45265,7.45233,7.452,7.45168,7.45135,7.45102,7.4507,7.45037,7.45005,7.44972,7.44939,7.44907,7.44874,7.44841,7.44809,7.44776,7.44744,7.44711,7.44678,7.44646,7.44613,7.44581,7.44548,7.44515,7.44483,7.4445,7.44417,7.44385,7.44352,7.4432,7.44287,7.44254,7.44222,7.44189,7.44157,7.44124,7.44091,7.44059,7.44026,7.43993,7.43961,7.43928,7.43896,7.43863,7.4383,7.43798,7.43765,7.43733,7.437,7.43667,7.43635,7.43602,7.43569,7.43537,7.43504,7.43472,7.43439,7.43406,7.43374,7.43341,7.43308,7.43276,7.43243,7.43211,7.43178,7.43145,7.43113,7.4308,7.43048,7.43015,7.42982,7.4295,7.42917,7.42884,7.42852,7.42819,7.42787,7.42754,7.42721,7.42689,7.42656,7.42624,7.42591,7.42558,7.42526,7.42493,7.4246,7.42428,7.42395,7.42363,7.4233,7.42297,7.42265,7.42232,7.422,7.42167,7.42134,7.42102,7.42069,7.42036,7.42004,7.41971,7.41939,7.41906,7.41873,7.41841,7.41808,7.41776,7.41743,7.4171,7.41678,7.41645,7.41612,7.4158,7.41547,7.41515,7.41482,7.41449,7.41417,7.41384,7.41352,7.41319,7.41286,7.41254,7.41221,7.41188,7.41156,7.41123,7.41091,7.41058,7.41025,7.40993,7.4096,7.40928,7.40895,7.40862,7.4083,7.40797,7.40764,7.40732,7.40699,7.40667,7.40634,7.40601,7.40569,7.40536,7.40504,7.40471,7.40438,7.40406,7.40373,7.4034,7.40308,7.40275,7.40243,7.4021,7.40177,7.40145,7.40112,7.4008,7.40047,7.40014,7.39982,7.39949,7.39916,7.39884,7.39851,7.39819,7.39786,7.39753,7.39721,7.39688,7.39656,7.39623,7.3959,7.39558,7.39525,7.39492,7.3946,7.39427,7.39395,7.39362,7.39329,7.39297,7.39264,7.39232,7.39199,7.39166,7.39134,7.39101,7.39068,7.39036,7.39003,7.38971,7.38938,7.38905,7.38873,7.3884,7.38808,7.38775,7.38742,7.3871,7.38677,7.38644,7.38612,7.38579,7.38547,7.38514,7.38481,7.38449,7.38416,7.38384,7.38351,7.38318,7.38286,7.38253,7.3822,7.38188,7.38155,7.38123,7.3809,7.38057,7.38025,7.37992,7.3796,7.37927,7.37894,7.37862,7.37829,7.37796,7.37764,7.37731,7.37699,7.37666,7.37633,7.37601,7.37568,7.37536,7.37503,7.3747,7.37438,7.37405,7.37372,7.3734,7.37307,7.37275,7.37242,7.37209,7.37177,7.37144,7.37112,7.37079,7.37046,7.37014,7.36981,7.36948,7.36916,7.36883,7.3685,7.36816,7.36783,7.3675,7.36717,7.36684,7.36651,7.36618,7.36584,7.36551,7.36518,7.36485,7.36452,7.36419,7.36386,7.36352,7.36319,7.36286,7.36253,7.3622,7.36187,7.36154,7.3612,7.36087,7.36054,7.36021,7.35988,7.35955,7.35922,7.35888,7.35855,7.35822,7.35789,7.35756,7.35723,7.3569,7.35656,7.35623,7.3559,7.35557,7.35524,7.35491,7.35458,7.35425,7.35391,7.35358,7.35325,7.35292,7.35259,7.35226,7.35193,7.35159,7.35126,7.35093,7.3506,7.35027,7.34994,7.34961,7.34927,7.34894,7.34861,7.34828,7.34795,7.34762,7.34729,7.34695,7.34662,7.34629,7.34596,7.34563,7.3453,7.34497,7.34463,7.3443,7.34397,7.34364,7.34331,7.34298,7.34265,7.34231,7.34198,7.34165,7.34132,7.34099,7.34066,7.34033,7.33999,7.33966,7.33933,7.339,7.33867,7.33834,7.33801,7.33768,7.33734,7.33701,7.33668,7.33635,7.33602,7.33569,7.33536,7.33502,7.33469,7.33436,7.33403,7.3337,7.33337,7.33304,7.3327,7.33237,7.33204,7.33171,7.33138,7.33105,7.33072,7.33038,7.33005,7.32972,7.32939,7.32906,7.32873,7.3284,7.32806,7.32773,7.3274,7.32707,7.32674,7.32641,7.32608,7.32574,7.32541,7.32508,7.32475,7.32442,7.32409,7.32376,7.32342,7.32309,7.32276,7.32243,7.3221,7.32177,7.32144,7.32111,7.32077,7.32044,7.32011,7.31978,7.31945,7.31912,7.31879,7.31845,7.31812,7.31779,7.31746,7.31713,7.3168,7.31647,7.31613,7.3158,7.31547,7.31514,7.31481,7.31448,7.31415,7.31381,7.31348,7.31315,7.31282,7.31249,7.31216,7.31183,7.31149,7.31116,7.31083,7.3105,7.31017,7.30984,7.30951,7.30917,7.30884,7.30851,7.30818,7.30785,7.30752,7.30719,7.30685,7.30652,7.30619,7.30587,7.30554,7.30521,7.30489,7.30456,7.30423,7.30391,7.30358,7.30326,7.30293,7.3026,7.30228,7.30195,7.30163,7.3013,7.30097,7.30065,7.30032,7.29999,7.29967,7.29934,7.29902,7.29869,7.29836,7.29804,7.29771,7.29739,7.29706,7.29673,7.29641,7.29608,7.29575,7.29543,7.2951,7.29478,7.29445,7.29412,7.2938,7.29347,7.29315,7.29282,7.29249,7.29217,7.29184,7.29151,7.29119,7.29086,7.29054,7.29021,7.28988,7.28956,7.28923,7.28891,7.28858,7.28825,7.28793,7.2876,7.28727,7.28695,7.28662,7.2863,7.28597,7.28564,7.28532,7.28499,7.28467,7.28434,7.28401,7.28369,7.28336,7.28303,7.28271,7.28238,7.28206,7.28173,7.2814,7.28108,7.28075,7.28043,7.2801,7.27977,7.27945,7.27912,7.27879,7.27847,7.27814,7.27782,7.27749,7.27716,7.27684,7.27651,7.27619,7.27586,7.27553,7.27521,7.27488,7.27455,7.27423,7.2739,7.27358,7.27325,7.27292,7.2726,7.27227,7.27195,7.27162,7.27129,7.27097,7.27064,7.27031,7.26999,7.26966,7.26934,7.26901,7.26868,7.26836,7.26803,7.26771,7.26738,7.26705,7.26673,7.2664,7.26607,7.26575,7.26542,7.2651,7.26477,7.26444,7.26412,7.26379,7.26347,7.26314,7.26281,7.26249,7.26216,7.26183,7.26151,7.26118,7.26086,7.26053,7.2602,7.25988,7.25955,7.25923,7.2589,7.25857,7.25825,7.25792,7.25759,7.25727,7.25694,7.25662,7.25629,7.25596,7.25564,7.25531,7.25499,7.25466,7.25433,7.25401,7.25368,7.25335,7.25303,7.2527,7.25238,7.25205,7.25172,7.2514,7.25107,7.25075,7.25042,7.25009,7.24977,7.24944,7.24911,7.24879,7.24846,7.24814,7.24781,7.24748,7.24716,7.24683,7.24651,7.24618,7.24585,7.24553,7.2452,7.24487,7.24455,7.24422,7.24392,7.24361,7.24331,7.243,7.2427,7.24239,7.24209,7.24178,7.24148,7.24117,7.24087,7.24056,7.24025,7.23995,7.23964,7.23934,7.23903,7.23873,7.23842,7.23812,7.23781,7.23751,7.2372,7.2369,7.23659,7.23629,7.23598,7.23568,7.23537,7.23507,7.23476,7.23446,7.23415,7.23385,7.23354,7.23324,7.23293,7.23263,7.23232,7.23202,7.23171,7.2314,7.2311,7.23079,7.23049,7.23018,7.22988,7.22957,7.22927,7.22896,7.22866,7.22835,7.22805,7.22774,7.22744,7.22713,7.22683,7.22652,7.22622,7.22591,7.22561,7.2253,7.225,7.22469,7.22439,7.22408,7.22378,7.22347,7.22317,7.22286,7.22255,7.22225,7.22194,7.22164,7.22133,7.22103,7.22072,7.22042,7.22011,7.21981,7.2195,7.2192,7.21889,7.21859,7.21828,7.21798,7.21767,7.21737,7.21706,7.21676,7.21645,7.21615,7.21584,7.21554,7.21523,7.21493,7.21462,7.21431,7.21401,7.2137,7.2134,7.21309,7.21279,7.21248,7.21218,7.21187,7.21157,7.21126,7.21096,7.21065,7.21035,7.21004,7.20974,7.20943,7.20913,7.20882,7.20852,7.20821,7.20791,7.2076,7.2073,7.20699,7.20669,7.20638,7.20608,7.20577,7.20546,7.20516,7.20485,7.20455,7.20424,7.20394,7.20363,7.20333,7.20302,7.20272,7.20241,7.20211,7.2018,7.2015,7.20119,7.20089,7.20058,7.20028,7.19997,7.19967,7.19936,7.19906,7.19875,7.19845,7.19814,7.19784,7.19753,7.19723,7.19692,7.19661,7.19631,7.196,7.1957,7.19539,7.19509,7.19478,7.19448,7.19417,7.19387,7.19356,7.19326,7.19295,7.19265,7.19234,7.19204,7.19173,7.19143,7.19112,7.19082,7.19051,7.19021,7.1899,7.1896,7.18929,7.18899,7.18868,7.18837,7.18807,7.18776,7.18746,7.18715,7.18685,7.18654,7.18624,7.18563,7.18503,7.18442,7.18382,7.18321,7.18261,7.182,7.1814,7.18079,7.18019,7.17958,7.17898,7.17837,7.17777,7.17716,7.17656,7.17595,7.17535,7.17474,7.17414,7.17353,7.17293,7.17232,7.17172,7.17111,7.17051,7.1699,7.1693,7.16869,7.16809,7.16748,7.16688,7.16627,7.16567,7.16506,7.16445,7.16385,7.16324,7.16264,7.16203,7.16143,7.16082,7.16022,7.15961,7.15901,7.1584,7.1578,7.15719,7.15659,7.15598,7.15538,7.15477,7.15417,7.15356,7.15296,7.15235,7.15175,7.15114,7.15054,7.14993,7.14933,7.14872,7.14812,7.14751,7.14691,7.1463,7.1457,7.14509,7.14449,7.14388,7.14328,7.14267,7.14207,7.14146,7.14086,7.14025,7.13965,7.13904,7.13844,7.13783,7.13723,7.13662,7.13601,7.13541,7.1348,7.1342,7.13359,7.13299,7.13238,7.13178,7.13117,7.13057,7.12996,7.12936,7.12875,7.12815,7.12754,7.12694,7.12633,7.12573,7.12512,7.12452,7.12391,7.12331,7.1227,7.1221,7.12149,7.12089,7.12028,7.11968,7.11907,7.11847,7.11786,7.11726,7.11665,7.11605,7.11544,7.11484,7.11423,7.11363,7.11302,7.11242,7.11181,7.11121,7.1106,7.11,7.10939,7.10879,7.10818,7.10757,7.10697,7.10636,7.10576,7.10515,7.10455,7.10394,7.10334,7.10273,7.10213,7.10152,7.10092,7.10031,7.09971,7.0991,7.0985,7.09789,7.09729,7.09668,7.09608,7.09547,7.09487,7.09426,7.09366,7.09305,7.09245,7.09184,7.09124,7.09063,7.09003,7.08942,7.08882,7.08821,7.08761,7.087,7.0864,7.08579,7.08519,7.08458,7.08398,7.08337,7.08277,7.08216,7.08156,7.08095,7.08035,7.07974,7.07913,7.07853,7.07792,7.07732,7.07671,7.07611,7.0755,7.0749,7.07429,7.07369,7.07308,7.07248,7.07187,7.07127,7.07089,7.07052,7.07015,7.06977,7.0694,7.06903,7.06865,7.06828,7.0679,7.06753,7.06716,7.06678,7.06641,7.06603,7.06566,7.06529,7.06491,7.06454,7.06417,7.06379,7.06342,7.06304,7.06267,7.0623,7.06192,7.06155,7.06117,7.0608,7.06043,7.06005,7.05968,7.05931,7.05893,7.05856,7.05818,7.05781,7.05744,7.05706,7.05669,7.05631,7.05594,7.05557,7.05519,7.05482,7.05445,7.05407,7.0537,7.05332,7.05295,7.05258,7.0522,7.05183,7.05146,7.05108,7.05071,7.05033,7.04996,7.04959,7.04921,7.04884,7.04846,7.04809,7.04772,7.04734,7.04697,7.0466,7.04622,7.04585,7.04547,7.0451,7.04473,7.04435,7.04398,7.0436,7.04323,7.04286,7.04248,7.04211,7.04174,7.04136,7.04099,7.04061,7.04024,7.03987,7.03949,7.03912,7.03874,7.03837,7.038,7.03762,7.03725,7.03688,7.0365,7.03613,7.03575,7.03538,7.03501,7.03463,7.03426,7.03388,7.03351,7.03314,7.03276,7.03239,7.03202,7.03164,7.03127,7.03089,7.03052,7.03015,7.02977,7.0294,7.02902,7.02865,7.02828,7.0279,7.02753,7.02716,7.02678,7.02641,7.02603,7.02566,7.02529,7.02491,7.02454,7.02416,7.02379,7.02342,7.02304,7.02267,7.0223,7.02192,7.02155,7.02117,7.0208,7.02043,7.02005,7.01968,7.0193,7.01893,7.01856,7.01818,7.01781,7.01744,7.01706,7.01669,7.01631,7.01594,7.01557,7.01519,7.01482,7.01444,7.01407,7.0137,7.01332,7.01295,7.01258,7.0122,7.01183,7.01145,7.01108,7.01071,7.01033,7.00996,7.00958,7.00921,7.00884,7.00846,7.00809,7.00772,7.00734,7.00697,7.00659,7.00622,7.00585,7.00547,7.0051,7.00472,7.00435,7.00398,7.0036,7.00323,7.00286,7.00248,7.00211,7.00173,7.00136,7.00099,7.00061,7.00024 };
//Arreglo de rotaciones en X para la animación por KeyFrames
float rotPX[2090] = { -0.0210526,-0.0421053,-0.0631579,-0.0842105,-0.105263,-0.126316,-0.147368,-0.168421,-0.189474,-0.210526,-0.231579,-0.252632,-0.273684,-0.294737,-0.315789,-0.336842,-0.357895,-0.378947,-0.4,-0.421053,-0.442105,-0.463158,-0.48421,-0.505263,-0.526316,-0.547368,-0.568421,-0.589474,-0.610526,-0.631579,-0.652632,-0.673684,-0.694737,-0.71579,-0.736842,-0.757895,-0.778948,-0.8,-0.821053,-0.842106,-0.863158,-0.884211,-0.905264,-0.926316,-0.947369,-0.968422,-0.989474,-1.01053,-1.03158,-1.05263,-1.07368,-1.09474,-1.11579,-1.13684,-1.1579,-1.17895,-1.2,-1.22105,-1.24211,-1.26316,-1.28421,-1.30526,-1.32632,-1.34737,-1.36842,-1.38947,-1.41053,-1.43158,-1.45263,-1.47368,-1.49474,-1.51579,-1.53684,-1.55789,-1.57895,-1.6,-1.62105,-1.6421,-1.66316,-1.68421,-1.70526,-1.72632,-1.74737,-1.76842,-1.78947,-1.81053,-1.83158,-1.85263,-1.87368,-1.89474,-1.91579,-1.93684,-1.95789,-1.97895,-2,-2.02105,-2.0421,-2.06316,-2.08421,-2.10526,-2.12631,-2.14737,-2.16842,-2.18947,-2.21053,-2.23158,-2.25263,-2.27368,-2.29474,-2.31579,-2.33684,-2.35789,-2.37895,-2.4,-2.42105,-2.4421,-2.46316,-2.48421,-2.50526,-2.52631,-2.54737,-2.56842,-2.58947,-2.61052,-2.63158,-2.65263,-2.67368,-2.69473,-2.71579,-2.73684,-2.75789,-2.77895,-2.8,-2.82105,-2.8421,-2.86316,-2.88421,-2.90526,-2.92631,-2.94737,-2.96842,-2.98947,-3.01052,-3.03158,-3.05263,-3.07368,-3.09473,-3.11579,-3.13684,-3.15789,-3.17894,-3.2,-3.22105,-3.2421,-3.26315,-3.28421,-3.30526,-3.32631,-3.34737,-3.36842,-3.38947,-3.41052,-3.43158,-3.45263,-3.47368,-3.49473,-3.51579,-3.53684,-3.55789,-3.57894,-3.6,-3.62105,-3.6421,-3.66315,-3.68421,-3.70526,-3.72631,-3.74736,-3.76842,-3.78947,-3.81052,-3.83158,-3.85263,-3.87368,-3.89473,-3.91579,-3.93684,-3.95789,-3.97894,-4,-4.21579,-4.43157,-4.64736,-4.86315,-5.07894,-5.29473,-5.51052,-5.72631,-5.9421,-6.15789,-6.37368,-6.58947,-6.80526,-7.02105,-7.23684,-7.45263,-7.66841,-7.8842,-8.09999,-8.31578,-8.53157,-8.74736,-8.96315,-9.17894,-9.39473,-9.61052,-9.82631,-10.0421,-10.2579,-10.4737,-10.6895,-10.9053,-11.1211,-11.3368,-11.5526,-11.7684,-11.9842,-12.2,-12.4158,-12.6316,-12.8474,-13.0632,-13.2789,-13.4947,-13.7105,-13.9263,-14.1421,-14.3579,-14.5737,-14.7895,-15.0053,-15.2211,-15.4368,-15.6526,-15.8684,-16.0842,-16.3,-16.5158,-16.7316,-16.9474,-17.1632,-17.379,-17.5947,-17.8105,-18.0263,-18.2421,-18.4579,-18.6737,-18.8895,-19.1053,-19.3211,-19.5369,-19.7526,-19.9684,-20.1842,-20.4,-20.6158,-20.8316,-21.0474,-21.2632,-21.479,-21.6947,-21.9105,-22.1263,-22.3421,-22.5579,-22.7737,-22.9895,-23.2053,-23.4211,-23.6369,-23.8526,-24.0684,-24.2842,-24.5,-24.7158,-24.9316,-25.1474,-25.3632,-25.579,-25.7948,-26.0105,-26.2263,-26.4421,-26.6579,-26.8737,-27.0895,-27.3053,-27.5211,-27.7369,-27.9527,-28.1684,-28.3842,-28.6,-28.8158,-29.0316,-29.2474,-29.4632,-29.679,-29.8948,-30.1106,-30.3263,-30.5421,-30.7579,-30.9737,-31.1895,-31.4053,-31.6211,-31.8369,-32.0527,-32.2684,-32.4842,-32.7,-32.9158,-33.1316,-33.3474,-33.5632,-33.779,-33.9948,-34.2106,-34.4263,-34.6421,-34.8579,-35.0737,-35.2895,-35.5053,-35.7211,-35.9369,-36.1527,-36.3685,-36.5842,-36.8,-37.0158,-37.2316,-37.4474,-37.6632,-37.879,-38.0948,-38.3106,-38.5264,-38.7421,-38.9579,-39.1737,-39.3895,-39.6053,-39.8211,-40.0369,-40.2527,-40.4685,-40.6842,-40.9,-41.1158,-41.3316,-41.5474,-41.7632,-41.979,-42.1948,-42.4106,-42.6264,-42.8421,-43.0579,-43.2737,-43.4895,-43.7053,-43.9211,-44.1369,-44.3527,-44.5685,-44.7843,-45,-45.2369,-45.4737,-45.7106,-45.9474,-46.1843,-46.4211,-46.6579,-46.8948,-47.1316,-47.3685,-47.6053,-47.8422,-48.079,-48.3158,-48.5527,-48.7895,-49.0264,-49.2632,-49.5001,-49.7369,-49.9738,-50.2106,-50.4474,-50.6843,-50.9211,-51.158,-51.3948,-51.6317,-51.8685,-52.1053,-52.3422,-52.579,-52.8159,-53.0527,-53.2896,-53.5264,-53.7632,-54.0001,-54.2369,-54.4738,-54.7106,-54.9475,-55.1843,-55.4211,-55.658,-55.8948,-56.1317,-56.3685,-56.6054,-56.8422,-57.079,-57.3159,-57.5527,-57.7896,-58.0264,-58.2633,-58.5001,-58.7369,-58.9738,-59.2106,-59.4475,-59.6843,-59.9212,-60.158,-60.3948,-60.6317,-60.8685,-61.1054,-61.3422,-61.5791,-61.8159,-62.0527,-62.2896,-62.5264,-62.7633,-63.0001,-63.237,-63.4738,-63.7107,-63.9475,-64.1843,-64.4212,-64.658,-64.8949,-65.1317,-65.3685,-65.6054,-65.8422,-66.079,-66.3159,-66.5527,-66.7896,-67.0264,-67.2632,-67.5001,-67.7369,-67.9738,-68.2106,-68.4474,-68.6843,-68.9211,-69.158,-69.3948,-69.6316,-69.8685,-70.1053,-70.3422,-70.579,-70.8158,-71.0527,-71.2895,-71.5264,-71.7632,-72,-72.2369,-72.4737,-72.7105,-72.9474,-73.1842,-73.4211,-73.6579,-73.8947,-74.1316,-74.3684,-74.6053,-74.8421,-75.0789,-75.3158,-75.5526,-75.7895,-76.0263,-76.2631,-76.5,-76.7368,-76.9737,-77.2105,-77.4473,-77.6842,-77.921,-78.1579,-78.3947,-78.6315,-78.8684,-79.1052,-79.342,-79.5789,-79.8157,-80.0526,-80.2894,-80.5262,-80.7631,-80.9999,-81.2368,-81.4736,-81.7104,-81.9473,-82.1841,-82.421,-82.6578,-82.8946,-83.1315,-83.3683,-83.6052,-83.842,-84.0788,-84.3157,-84.5525,-84.7894,-85.0262,-85.263,-85.4999,-85.7367,-85.9735,-86.2104,-86.4472,-86.6841,-86.9209,-87.1577,-87.3946,-87.6314,-87.8683,-88.1051,-88.3419,-88.5788,-88.8156,-89.0525,-89.2893,-89.5261,-89.763,-89.9998,-90.2367,-90.4735,-90.7103,-90.9472,-91.184,-91.4209,-91.6577,-91.8945,-92.1314,-92.3682,-92.605,-92.8419,-93.0787,-93.3156,-93.5524,-93.7892,-94.0261,-94.2629,-94.4998,-94.7366,-94.9734,-95.2103,-95.4471,-95.684,-95.9208,-96.1576,-96.3945,-96.6313,-96.8682,-97.105,-97.3418,-97.5787,-97.8155,-98.0524,-98.2892,-98.526,-98.7629,-98.9997,-99.2365,-99.4734,-99.7102,-99.9471,-100.184,-100.421,-100.658,-100.894,-101.131,-101.368,-101.605,-101.842,-102.079,-102.315,-102.552,-102.789,-103.026,-103.263,-103.5,-103.736,-103.973,-104.21,-104.447,-104.684,-104.921,-105.158,-105.394,-105.631,-105.868,-106.105,-106.342,-106.579,-106.815,-107.052,-107.289,-107.526,-107.763,-108,-108.236,-108.473,-108.71,-108.947,-109.184,-109.421,-109.657,-109.894,-110.131,-110.368,-110.605,-110.842,-111.079,-111.315,-111.552,-111.789,-112.026,-112.263,-112.5,-112.736,-112.973,-113.21,-113.447,-113.684,-113.921,-114.157,-114.394,-114.631,-114.868,-115.105,-115.342,-115.578,-115.815,-116.052,-116.289,-116.526,-116.763,-116.999,-117.236,-117.473,-117.71,-117.947,-118.184,-118.421,-118.657,-118.894,-119.131,-119.368,-119.605,-119.842,-120.078,-120.315,-120.552,-120.789,-121.026,-121.263,-121.499,-121.736,-121.973,-122.21,-122.447,-122.684,-122.92,-123.157,-123.394,-123.631,-123.868,-124.105,-124.342,-124.578,-124.815,-125.052,-125.289,-125.526,-125.763,-125.999,-126.236,-126.473,-126.71,-126.947,-127.184,-127.42,-127.657,-127.894,-128.131,-128.368,-128.605,-128.841,-129.078,-129.315,-129.552,-129.789,-130.026,-130.263,-130.499,-130.736,-130.973,-131.21,-131.447,-131.684,-131.921,-132.157,-132.394,-132.631,-132.868,-133.105,-133.342,-133.578,-133.815,-134.052,-134.289,-134.526,-134.763,-135,-135.236,-135.473,-135.71,-135.947,-136.184,-136.421,-136.657,-136.894,-137.131,-137.368,-137.605,-137.842,-138.079,-138.315,-138.552,-138.789,-139.026,-139.263,-139.5,-139.736,-139.973,-140.21,-140.447,-140.684,-140.921,-141.158,-141.394,-141.631,-141.868,-142.105,-142.342,-142.579,-142.815,-143.052,-143.289,-143.526,-143.763,-144,-144.237,-144.473,-144.71,-144.947,-145.184,-145.421,-145.658,-145.894,-146.131,-146.368,-146.605,-146.842,-147.079,-147.316,-147.552,-147.789,-148.026,-148.263,-148.5,-148.737,-148.973,-149.21,-149.447,-149.684,-149.921,-150.158,-150.395,-150.631,-150.868,-151.105,-151.342,-151.579,-151.816,-152.052,-152.289,-152.526,-152.763,-153,-153.237,-153.474,-153.71,-153.947,-154.184,-154.421,-154.658,-154.895,-155.132,-155.368,-155.605,-155.842,-156.079,-156.316,-156.553,-156.789,-157.026,-157.263,-157.5,-157.737,-157.974,-158.211,-158.447,-158.684,-158.921,-159.158,-159.395,-159.632,-159.868,-160.105,-160.342,-160.579,-160.816,-161.053,-161.29,-161.526,-161.763,-162,-162.237,-162.474,-162.711,-162.947,-163.184,-163.421,-163.658,-163.895,-164.132,-164.369,-164.605,-164.842,-165.079,-165.316,-165.553,-165.79,-166.026,-166.263,-166.5,-166.737,-166.974,-167.211,-167.448,-167.684,-167.921,-168.158,-168.395,-168.632,-168.869,-169.105,-169.342,-169.579,-169.816,-170.053,-170.29,-170.527,-170.763,-171,-171.237,-171.474,-171.711,-171.948,-172.184,-172.421,-172.658,-172.895,-173.132,-173.369,-173.606,-173.842,-174.079,-174.316,-174.553,-174.79,-175.027,-175.263,-175.5,-175.737,-175.974,-176.211,-176.448,-176.685,-176.921,-177.158,-177.395,-177.632,-177.869,-178.106,-178.342,-178.579,-178.816,-179.053,-179.29,-179.527,-179.764,-180,-180.237,-180.474,-180.711,-180.948,-181.185,-181.422,-181.658,-181.895,-182.132,-182.369,-182.606,-182.843,-183.079,-183.316,-183.553,-183.79,-184.027,-184.264,-184.501,-184.737,-184.974,-185.211,-185.448,-185.685,-185.922,-186.158,-186.395,-186.632,-186.869,-187.106,-187.343,-187.58,-187.816,-188.053,-188.29,-188.527,-188.764,-189.001,-189.237,-189.474,-189.711,-189.948,-190.185,-190.422,-190.659,-190.895,-191.132,-191.369,-191.606,-191.843,-192.08,-192.316,-192.553,-192.79,-193.027,-193.264,-193.501,-193.738,-193.974,-194.211,-194.448,-194.685,-194.922,-195.159,-195.395,-195.632,-195.869,-196.106,-196.343,-196.58,-196.817,-197.053,-197.29,-197.527,-197.764,-198.001,-198.238,-198.474,-198.711,-198.948,-199.185,-199.422,-199.659,-199.896,-200.132,-200.369,-200.606,-200.843,-201.08,-201.317,-201.553,-201.79,-202.027,-202.264,-202.501,-202.738,-202.975,-203.211,-203.448,-203.685,-203.922,-204.159,-204.396,-204.633,-204.869,-205.106,-205.343,-205.58,-205.817,-206.054,-206.29,-206.527,-206.764,-207.001,-207.238,-207.475,-207.712,-207.948,-208.185,-208.422,-208.659,-208.896,-209.133,-209.369,-209.606,-209.843,-210.08,-210.317,-210.554,-210.791,-211.027,-211.264,-211.501,-211.738,-211.975,-212.212,-212.448,-212.685,-212.922,-213.159,-213.396,-213.633,-213.87,-214.106,-214.343,-214.58,-214.817,-215.054,-215.291,-215.527,-215.764,-216.001,-216.238,-216.475,-216.712,-216.949,-217.185,-217.422,-217.659,-217.896,-218.133,-218.37,-218.606,-218.843,-219.08,-219.317,-219.554,-219.791,-220.028,-220.264,-220.501,-220.738,-220.975,-221.212,-221.449,-221.685,-221.922,-222.159,-222.396,-222.633,-222.87,-223.107,-223.343,-223.58,-223.817,-224.054,-224.291,-224.528,-224.764,-225.001,-225.238,-225.475,-225.712,-225.949,-226.186,-226.422,-226.659,-226.896,-227.133,-227.37,-227.607,-227.844,-228.08,-228.317,-228.554,-228.791,-229.028,-229.265,-229.501,-229.738,-229.975,-230.212,-230.449,-230.686,-230.923,-231.159,-231.396,-231.633,-231.87,-232.107,-232.344,-232.58,-232.817,-233.054,-233.291,-233.528,-233.765,-234.002,-234.238,-234.475,-234.712,-234.949,-235.186,-235.423,-235.659,-235.896,-236.133,-236.37,-236.607,-236.844,-237.081,-237.317,-237.554,-237.791,-238.028,-238.265,-238.502,-238.738,-238.975,-239.212,-239.449,-239.686,-239.923,-240.16,-240.396,-240.633,-240.87,-241.107,-241.344,-241.581,-241.817,-242.054,-242.291,-242.528,-242.765,-243.002,-243.239,-243.475,-243.712,-243.949,-244.186,-244.423,-244.66,-244.896,-245.133,-245.37,-245.607,-245.844,-246.081,-246.318,-246.554,-246.791,-247.028,-247.265,-247.502,-247.739,-247.975,-248.212,-248.449,-248.686,-248.923,-249.16,-249.397,-249.633,-249.87,-250.107,-250.344,-250.581,-250.818,-251.055,-251.291,-251.528,-251.765,-252.002,-252.239,-252.476,-252.712,-252.949,-253.186,-253.423,-253.66,-253.897,-254.134,-254.37,-254.607,-254.844,-255.081,-255.318,-255.555,-255.791,-256.028,-256.265,-256.502,-256.739,-256.976,-257.213,-257.449,-257.686,-257.923,-258.16,-258.397,-258.634,-258.87,-259.107,-259.344,-259.581,-259.818,-260.055,-260.292,-260.528,-260.765,-261.002,-261.239,-261.476,-261.713,-261.949,-262.186,-262.423,-262.66,-262.897,-263.134,-263.371,-263.607,-263.844,-264.081,-264.318,-264.555,-264.792,-265.028,-265.265,-265.502,-265.739,-265.976,-266.213,-266.45,-266.686,-266.923,-267.16,-267.397,-267.634,-267.871,-268.107,-268.344,-268.581,-268.818,-269.055,-269.292,-269.529,-269.765,-270.002,-270.239,-270.476,-270.713,-270.95,-271.186,-271.423,-271.66,-271.897,-272.134,-272.371,-272.608,-272.844,-273.081,-273.318,-273.555,-273.792,-274.029,-274.266,-274.502,-274.739,-274.976,-275.213,-275.45,-275.687,-275.923,-276.16,-276.397,-276.634,-276.871,-277.108,-277.345,-277.581,-277.818,-278.055,-278.292,-278.529,-278.766,-279.002,-279.239,-279.476,-279.713,-279.95,-280.187,-280.424,-280.66,-280.897,-281.134,-281.371,-281.608,-281.845,-282.081,-282.318,-282.555,-282.792,-283.029,-283.266,-283.503,-283.739,-283.976,-284.213,-284.45,-284.687,-284.924,-285.16,-285.397,-285.634,-285.871,-286.108,-286.345,-286.582,-286.818,-287.055,-287.292,-287.529,-287.766,-288.003,-288.239,-288.476,-288.713,-288.95,-289.187,-289.424,-289.661,-289.897,-290.134,-290.371,-290.608,-290.845,-291.082,-291.318,-291.555,-291.792,-292.029,-292.266,-292.503,-292.74,-292.976,-293.213,-293.45,-293.687,-293.924,-294.161,-294.397,-294.634,-294.871,-295.108,-295.345,-295.582,-295.819,-296.055,-296.292,-296.529,-296.766,-297.003,-297.24,-297.477,-297.713,-297.95,-298.187,-298.424,-298.661,-298.898,-299.134,-299.371,-299.608,-299.845,-300.082,-300.319,-300.556,-300.792,-301.029,-301.266,-301.503,-301.74,-301.977,-302.213,-302.45,-302.687,-302.924,-303.161,-303.398,-303.635,-303.871,-304.108,-304.345,-304.582,-304.819,-305.056,-305.292,-305.529,-305.766,-306.003,-306.24,-306.477,-306.714,-306.95,-307.187,-307.424,-307.661,-307.898,-308.135,-308.371,-308.608,-308.845,-309.082,-309.319,-309.556,-309.793,-310.029,-310.266,-310.503,-310.74,-310.977,-311.214,-311.45,-311.687,-311.924,-312.161,-312.398,-312.635,-312.872,-313.108,-313.345,-313.582,-313.819,-314.056,-314.293,-314.529,-314.766,-315.003,-315.24,-315.477,-315.714,-315.951,-316.187,-316.424,-316.661,-316.898,-317.135,-317.372,-317.608,-317.845,-318.082,-318.319,-318.556,-318.793,-319.03,-319.266,-319.503,-319.74,-319.977,-320.214,-320.451,-320.688,-320.924,-321.161,-321.398,-321.635,-321.872,-322.109,-322.345,-322.582,-322.819,-323.056,-323.293,-323.53,-323.767,-324.003,-324.24,-324.477,-324.714,-324.951,-325.188,-325.424,-325.661,-325.898,-326.135,-326.372,-326.609,-326.846,-327.082,-327.319,-327.556,-327.793,-328.03,-328.267,-328.503,-328.74,-328.977,-329.214,-329.451,-329.688,-329.925,-330.161,-330.398,-330.635,-330.872,-331.109,-331.346,-331.582,-331.819,-332.056,-332.293,-332.53,-332.767,-333.004,-333.24,-333.477,-333.714,-333.951,-334.188,-334.425,-334.661,-334.898,-335.135,-335.372,-335.609,-335.846,-336.083,-336.319,-336.556,-336.793,-337.03,-337.267,-337.504,-337.74,-337.977,-338.214,-338.451,-338.688,-338.925,-339.162,-339.398,-339.635,-339.872,-340.109,-340.346,-340.583,-340.819,-341.056,-341.293,-341.53,-341.767,-342.004,-342.241,-342.477,-342.714,-342.951,-343.188,-343.425,-343.662,-343.898,-344.135,-344.372,-344.609,-344.846,-345.083,-345.32,-345.556,-345.793,-346.03,-346.267,-346.504,-346.741,-346.978,-347.214,-347.451,-347.688,-347.925,-348.162,-348.399,-348.635,-348.872,-349.109,-349.346,-349.583,-349.82,-350.057,-350.293,-350.53,-350.767,-351.004,-351.241,-351.478,-351.714,-351.951,-352.188,-352.425,-352.662,-352.899,-353.136,-353.372,-353.609,-353.846,-354.083,-354.32,-354.557,-354.793,-355.03,-355.267,-355.504,-355.741,-355.978,-356.215,-356.451,-356.688,-356.925,-357.162,-357.399,-357.636,-357.872,-358.109,-358.346,-358.583,-358.82,-359.057,-359.294,-359.53,-359.767,-360.004,-360.162,-360.32,-360.478,-360.636,-360.794,-360.951,-361.109,-361.267,-361.425,-361.583,-361.741,-361.899,-362.057,-362.215,-362.373,-362.53,-362.688,-362.846,-363.004,-363.162,-363.32,-363.478,-363.636,-363.794,-363.952,-364.109,-364.267,-364.425,-364.583,-364.741,-364.899,-365.057,-365.215,-365.373,-365.531,-365.688,-365.846,-366.004,-366.162,-366.32,-366.478,-366.636,-366.794,-366.952,-367.109,-367.267,-367.425,-367.583,-367.741,-367.899,-368.057,-368.215,-368.373,-368.531,-368.688,-368.846,-369.004,-369.162,-369.32,-369.478,-369.636,-369.794,-369.952,-370.11,-370.267,-370.425,-370.583,-370.741,-370.899,-371.057,-371.215,-371.373,-371.531,-371.689,-371.846,-372.004,-372.162,-372.32,-372.478,-372.636,-372.794,-372.952,-373.11,-373.268,-373.425,-373.583,-373.741,-373.899,-374.057,-374.215,-374.373,-374.531,-374.689,-374.846,-375.004,-375.162,-375.32,-375.478,-375.636,-375.794,-375.952,-376.11,-376.268,-376.425,-376.583,-376.741,-376.899,-377.057,-377.215,-377.373,-377.531,-377.689,-377.847,-378.004,-378.162,-378.32,-378.478,-378.636,-378.794,-378.952,-379.11,-379.268,-379.426,-379.583,-379.741,-379.899,-380.057,-380.215,-380.373,-380.531,-380.689,-380.847,-381.005,-381.162,-381.32,-381.478,-381.636,-381.794,-381.952,-382.11,-382.268,-382.426,-382.583,-382.741,-382.899,-383.057,-383.215,-383.373,-383.531,-383.689,-383.847,-384.005,-384.162,-384.32,-384.478,-384.636,-384.794,-384.952,-385.11,-385.268,-385.426,-385.584,-385.741,-385.899,-386.057,-386.215,-386.373,-386.531,-386.689,-386.847,-387.005,-387.163,-387.32,-387.478,-387.636,-387.794,-387.952,-388.11,-388.268,-388.426,-388.584,-388.742,-388.899,-389.057,-389.215,-389.373,-389.531,-389.689,-389.847,-390.005,-390.084,-390.163,-390.242,-390.32,-390.399,-390.478,-390.557,-390.636,-390.715,-390.794,-390.873,-390.952,-391.031,-391.11,-391.189,-391.268,-391.347,-391.426,-391.505,-391.584,-391.663,-391.742,-391.821,-391.899,-391.978,-392.057,-392.136,-392.215,-392.294,-392.373,-392.452,-392.531,-392.61,-392.689,-392.768,-392.847,-392.926,-393.005,-393.084,-393.163,-393.242,-393.321,-393.4,-393.478,-393.557,-393.636,-393.715,-393.794,-393.873,-393.952,-394.031,-394.11,-394.189,-394.268,-394.347,-394.426,-394.505,-394.584,-394.663,-394.742,-394.821,-394.9,-394.978,-395.057,-395.136,-395.215,-395.294,-395.373,-395.452,-395.531,-395.61,-395.689,-395.768,-395.847,-395.926,-396.005,-396.084,-396.163,-396.242,-396.321,-396.4,-396.479,-396.557,-396.636,-396.715,-396.794,-396.873,-396.952,-397.031,-397.11,-397.189,-397.268,-397.347,-397.426,-397.505,-397.584,-397.663,-397.742,-397.821,-397.9,-397.979,-398.057,-398.136,-398.215,-398.294,-398.373,-398.452,-398.531,-398.61,-398.689,-398.768,-398.847,-398.926,-399.005,-399.084,-399.163,-399.242,-399.321,-399.4,-399.479,-399.558,-399.636,-399.715,-399.794,-399.873,-399.952,-400.031,-400.11,-400.189,-400.268,-400.347,-400.426,-400.505,-400.584,-400.663,-400.742,-400.821,-400.9,-400.979,-401.058,-401.137,-401.215,-401.294,-401.373,-401.452,-401.531,-401.61,-401.689,-401.768,-401.847,-401.926,-402.005,-402.084,-402.163,-402.242,-402.321,-402.4,-402.479,-402.558,-402.637,-402.715,-402.794,-402.873,-402.952,-403.031,-403.11,-403.189,-403.268,-403.347,-403.426,-403.505,-403.584,-403.663,-403.742,-403.821,-403.9,-403.979,-404.058,-404.137,-404.216,-404.294,-404.373,-404.452,-404.531,-404.61,-404.689,-404.768,-404.847,-404.926,-405.005 };
//Posiciones y rotación originales de la pelota
float posY_Pelota = 1.908f;
float posZ_Pelota = 7.681;
float rotX_Pelota = 0;

//2.- Libro que cae del estante
bool animC2 = false;		//Activación
bool L_rec1 = true;			//Estado del recorrido: primera parte
bool L_rec2 = false;		//Estado del recorrido: segunda parte
//Arreglo de posiciones en X para la animación por KeyFrames
float movLX[570] = { -3.58047,-3.58095,-3.58142,-3.58189,-3.58237,-3.58284,-3.58332,-3.58379,-3.58426,-3.58474,-3.58521,-3.58568,-3.58616,-3.58663,-3.58711,-3.58758,-3.58805,-3.58853,-3.589,-3.58947,-3.58995,-3.59042,-3.5909,-3.59137,-3.59184,-3.59232,-3.59279,-3.59326,-3.59374,-3.59421,-3.59469,-3.59516,-3.59563,-3.59611,-3.59658,-3.59705,-3.59753,-3.598,-3.59848,-3.59895,-3.59942,-3.5999,-3.60037,-3.60084,-3.60132,-3.60179,-3.60227,-3.60274,-3.60321,-3.60369,-3.60416,-3.60463,-3.60511,-3.60558,-3.60606,-3.60653,-3.607,-3.60748,-3.60795,-3.60842,-3.6089,-3.60937,-3.60985,-3.61032,-3.61079,-3.61127,-3.61174,-3.61221,-3.61269,-3.61316,-3.61364,-3.61411,-3.61458,-3.61506,-3.61553,-3.616,-3.61648,-3.61695,-3.61743,-3.6179,-3.61837,-3.61885,-3.61932,-3.61979,-3.62027,-3.62074,-3.62122,-3.62169,-3.62216,-3.62264,-3.62311,-3.62358,-3.62406,-3.62453,-3.62501,-3.62548,-3.62595,-3.62643,-3.6269,-3.62737,-3.62785,-3.62832,-3.62879,-3.62927,-3.62974,-3.63022,-3.63069,-3.63116,-3.63164,-3.63211,-3.63258,-3.63306,-3.63353,-3.63401,-3.63448,-3.63495,-3.63543,-3.6359,-3.63637,-3.63685,-3.63732,-3.6378,-3.63827,-3.63874,-3.63922,-3.63969,-3.64016,-3.64064,-3.64111,-3.64159,-3.64206,-3.64253,-3.64301,-3.64348,-3.64395,-3.64443,-3.6449,-3.64538,-3.64585,-3.64632,-3.6468,-3.64727,-3.64774,-3.64822,-3.64869,-3.64917,-3.64964,-3.65011,-3.65059,-3.65106,-3.65153,-3.65201,-3.65248,-3.65296,-3.65343,-3.6539,-3.65438,-3.65485,-3.65532,-3.6558,-3.65627,-3.65675,-3.65722,-3.65769,-3.65817,-3.65864,-3.65911,-3.65959,-3.66006,-3.66054,-3.66101,-3.66148,-3.66196,-3.66243,-3.6629,-3.66338,-3.66385,-3.66433,-3.6648,-3.66527,-3.66575,-3.66622,-3.66669,-3.66717,-3.66764,-3.66812,-3.66859,-3.66906,-3.66954,-3.67001,-3.67054,-3.67106,-3.67159,-3.67212,-3.67264,-3.67317,-3.6737,-3.67422,-3.67475,-3.67527,-3.6758,-3.67633,-3.67685,-3.67738,-3.67791,-3.67843,-3.67896,-3.67949,-3.68001,-3.68054,-3.68107,-3.68159,-3.68212,-3.68264,-3.68317,-3.6837,-3.68422,-3.68475,-3.68528,-3.6858,-3.68633,-3.68686,-3.68738,-3.68791,-3.68844,-3.68896,-3.68949,-3.69001,-3.69054,-3.69107,-3.69159,-3.69212,-3.69265,-3.69317,-3.6937,-3.69423,-3.69475,-3.69528,-3.69581,-3.69633,-3.69686,-3.69738,-3.69791,-3.69844,-3.69896,-3.69949,-3.70002,-3.70054,-3.70107,-3.7016,-3.70212,-3.70265,-3.70318,-3.7037,-3.70423,-3.70475,-3.70528,-3.70581,-3.70633,-3.70686,-3.70739,-3.70791,-3.70844,-3.70897,-3.70949,-3.71002,-3.71055,-3.71107,-3.7116,-3.71212,-3.71265,-3.71318,-3.7137,-3.71423,-3.71476,-3.71528,-3.71581,-3.71634,-3.71686,-3.71739,-3.71792,-3.71844,-3.71897,-3.71949,-3.72002,-3.72055,-3.72107,-3.7216,-3.72213,-3.72265,-3.72318,-3.72371,-3.72423,-3.72476,-3.72529,-3.72581,-3.72634,-3.72686,-3.72739,-3.72792,-3.72844,-3.72897,-3.7295,-3.73002,-3.73055,-3.73108,-3.7316,-3.73213,-3.73266,-3.73318,-3.73371,-3.73423,-3.73476,-3.73529,-3.73581,-3.73634,-3.73687,-3.73739,-3.73792,-3.73845,-3.73897,-3.7395,-3.74003,-3.74055,-3.74108,-3.7416,-3.74213,-3.74266,-3.74318,-3.74371,-3.74424,-3.74476,-3.74529,-3.74582,-3.74634,-3.74687,-3.7474,-3.74792,-3.74845,-3.74897,-3.7495,-3.75003,-3.75055,-3.75108,-3.75161,-3.75213,-3.75266,-3.75319,-3.75371,-3.75424,-3.75477,-3.75529,-3.75582,-3.75634,-3.75687,-3.7574,-3.75792,-3.75845,-3.75898,-3.7595,-3.76003,-3.76056,-3.76108,-3.76161,-3.76214,-3.76266,-3.76319,-3.76371,-3.76424,-3.76477,-3.76529,-3.76582,-3.76635,-3.76687,-3.7674,-3.76793,-3.76845,-3.76898,-3.76951,-3.77003,-3.77211,-3.77418,-3.77625,-3.77833,-3.7804,-3.78247,-3.78455,-3.78662,-3.7887,-3.79077,-3.79284,-3.79492,-3.79699,-3.79906,-3.80114,-3.80321,-3.80529,-3.80736,-3.80943,-3.81151,-3.81358,-3.81565,-3.81773,-3.8198,-3.82188,-3.82395,-3.82602,-3.8281,-3.83017,-3.83224,-3.83432,-3.83639,-3.83847,-3.84054,-3.84261,-3.84469,-3.84676,-3.84883,-3.85091,-3.85298,-3.85506,-3.85713,-3.8592,-3.86128,-3.86335,-3.86542,-3.8675,-3.86957,-3.87165,-3.87372,-3.87579,-3.87787,-3.87994,-3.88201,-3.88409,-3.88616,-3.88824,-3.89031,-3.89238,-3.89446,-3.89653,-3.8986,-3.90068,-3.90275,-3.90483,-3.9069,-3.90897,-3.91105,-3.91312,-3.91519,-3.91727,-3.91934,-3.92142,-3.92349,-3.92556,-3.92764,-3.92971,-3.93179,-3.93386,-3.93593,-3.93801,-3.94008,-3.94215,-3.94423,-3.9463,-3.94838,-3.95045,-3.95252,-3.9546,-3.95667,-3.95874,-3.96082,-3.96289,-3.96497,-3.96704,-3.96911,-3.97119,-3.97326,-3.97533,-3.97741,-3.97948,-3.98156,-3.98363,-3.9857,-3.98778,-3.98985,-3.99192,-3.994,-3.99607,-3.99815,-4.00022,-4.00229,-4.00437,-4.00644,-4.00851,-4.01059,-4.01266,-4.01474,-4.01681,-4.01888,-4.02096,-4.02303,-4.0251,-4.02718,-4.02925,-4.03133,-4.0334,-4.03547,-4.03755,-4.03962,-4.04169,-4.04377,-4.04584,-4.04792,-4.04999,-4.05206,-4.05414,-4.05621,-4.05828,-4.06036,-4.06243,-4.06451,-4.06658,-4.06865,-4.07073,-4.0728,-4.07487,-4.07695,-4.07902,-4.0811,-4.08317,-4.08524,-4.08732,-4.08939,-4.09146,-4.09354,-4.09561,-4.09769,-4.09976,-4.10183,-4.10391,-4.10598,-4.10806,-4.11013,-4.1122,-4.11428,-4.11635,-4.11842,-4.1205,-4.12257,-4.12465,-4.12672,-4.12879,-4.13087,-4.13294,-4.13501,-4.13709,-4.13916,-4.14124,-4.14331,-4.14538,-4.14746,-4.14953,-4.1516,-4.15368,-4.15575,-4.15783,-4.1599,-4.16197,-4.16405 };
//Arreglo de posiciones en Y para la animación por KeyFrames
float movLY[570] = { 3.64496,3.64493,3.64489,3.64485,3.64482,3.64478,3.64474,3.6447,3.64467,3.64463,3.64459,3.64456,3.64452,3.64448,3.64445,3.64441,3.64437,3.64433,3.6443,3.64426,3.64422,3.64419,3.64415,3.64411,3.64408,3.64404,3.644,3.64397,3.64393,3.64389,3.64385,3.64382,3.64378,3.64374,3.64371,3.64367,3.64363,3.6436,3.64356,3.64352,3.64348,3.64345,3.64341,3.64337,3.64334,3.6433,3.64326,3.64323,3.64319,3.64315,3.64312,3.64308,3.64304,3.643,3.64297,3.64293,3.64289,3.64286,3.64282,3.64278,3.64275,3.64271,3.64267,3.64263,3.6426,3.64256,3.64252,3.64249,3.64245,3.64241,3.64238,3.64234,3.6423,3.64227,3.64223,3.64219,3.64215,3.64212,3.64208,3.64204,3.64201,3.64197,3.64193,3.6419,3.64186,3.64182,3.64178,3.64175,3.64171,3.64167,3.64164,3.6416,3.64156,3.64153,3.64149,3.64145,3.64142,3.64138,3.64134,3.6413,3.64127,3.64123,3.64119,3.64116,3.64112,3.64108,3.64105,3.64101,3.64097,3.64093,3.6409,3.64086,3.64082,3.64079,3.64075,3.64071,3.64068,3.64064,3.6406,3.64057,3.64053,3.64049,3.64045,3.64042,3.64038,3.64034,3.64031,3.64027,3.64023,3.6402,3.64016,3.64012,3.64008,3.64005,3.64001,3.63997,3.63994,3.6399,3.63986,3.63983,3.63979,3.63975,3.63972,3.63968,3.63964,3.6396,3.63957,3.63953,3.63949,3.63946,3.63942,3.63938,3.63935,3.63931,3.63927,3.63924,3.6392,3.63916,3.63912,3.63909,3.63905,3.63901,3.63898,3.63894,3.6389,3.63887,3.63883,3.63879,3.63875,3.63872,3.63868,3.63864,3.63861,3.63857,3.63853,3.6385,3.63846,3.63842,3.63839,3.63835,3.63831,3.63827,3.63824,3.6382,3.63816,3.63813,3.63809,3.63805,3.63802,3.63798,3.63766,3.63734,3.63702,3.63669,3.63637,3.63605,3.63573,3.63541,3.63509,3.63477,3.63445,3.63412,3.6338,3.63348,3.63316,3.63284,3.63252,3.6322,3.63188,3.63156,3.63123,3.63091,3.63059,3.63027,3.62995,3.62963,3.62931,3.62899,3.62867,3.62834,3.62802,3.6277,3.62738,3.62706,3.62674,3.62642,3.6261,3.62577,3.62545,3.62513,3.62481,3.62449,3.62417,3.62385,3.62353,3.62321,3.62288,3.62256,3.62224,3.62192,3.6216,3.62128,3.62096,3.62064,3.62032,3.61999,3.61967,3.61935,3.61903,3.61871,3.61839,3.61807,3.61775,3.61742,3.6171,3.61678,3.61646,3.61614,3.61582,3.6155,3.61518,3.61486,3.61453,3.61421,3.61389,3.61357,3.61325,3.61293,3.61261,3.61229,3.61197,3.61164,3.61132,3.611,3.61068,3.61036,3.61004,3.60972,3.6094,3.60908,3.60875,3.60843,3.60811,3.60779,3.60747,3.60715,3.60683,3.60651,3.60618,3.60586,3.60554,3.60522,3.6049,3.60458,3.60426,3.60394,3.60362,3.60329,3.60297,3.60265,3.60233,3.60201,3.60169,3.60137,3.60105,3.60073,3.6004,3.60008,3.59976,3.59944,3.59912,3.5988,3.59848,3.59816,3.59783,3.59751,3.59719,3.59687,3.59655,3.59623,3.59591,3.59559,3.59527,3.59494,3.59462,3.5943,3.59398,3.59366,3.59334,3.59302,3.5927,3.59238,3.59205,3.59173,3.59141,3.59109,3.59077,3.59045,3.59013,3.58981,3.58948,3.58916,3.58884,3.58852,3.5882,3.58788,3.58756,3.58724,3.58692,3.58659,3.58627,3.58595,3.58563,3.58531,3.58499,3.58467,3.58435,3.58403,3.5837,3.58338,3.58306,3.58274,3.58242,3.5821,3.58178,3.58146,3.58114,3.58081,3.58049,3.58017,3.57985,3.57953,3.57921,3.57889,3.57857,3.57824,3.57792,3.5776,3.57728,3.57696,3.5619,3.54684,3.53179,3.51673,3.50167,3.48661,3.47156,3.4565,3.44144,3.42638,3.41132,3.39627,3.38121,3.36615,3.35109,3.33604,3.32098,3.30592,3.29086,3.2758,3.26075,3.24569,3.23063,3.21557,3.20052,3.18546,3.1704,3.15534,3.14028,3.12523,3.11017,3.09511,3.08005,3.06499,3.04994,3.03488,3.01982,3.00476,2.98971,2.97465,2.95959,2.94453,2.92947,2.91442,2.89936,2.8843,2.86924,2.85419,2.83913,2.82407,2.80901,2.79395,2.7789,2.76384,2.74878,2.73372,2.71867,2.70361,2.68855,2.67349,2.65843,2.64338,2.62832,2.61326,2.5982,2.58315,2.56809,2.55303,2.53797,2.52291,2.50786,2.4928,2.47774,2.46268,2.44762,2.43257,2.41751,2.40245,2.38739,2.37234,2.35728,2.34222,2.32716,2.3121,2.29705,2.28199,2.26693,2.25187,2.23682,2.22176,2.2067,2.19164,2.17658,2.16153,2.14647,2.13141,2.11635,2.1013,2.08624,2.07118,2.05612,2.04106,2.02601,2.01095,1.99589,1.98083,1.96577,1.95072,1.93566,1.9206,1.90554,1.89049,1.87543,1.86037,1.84531,1.83025,1.8152,1.80014,1.78508,1.77002,1.75496,1.73991,1.72485,1.70979,1.69473,1.67967,1.66462,1.64956,1.6345,1.61944,1.60438,1.58933,1.57427,1.55921,1.54415,1.5291,1.51404,1.49898,1.48392,1.46886,1.45381,1.43875,1.42369,1.40863,1.39357,1.37852,1.36346,1.3484,1.33334,1.31828,1.30323,1.28817,1.27311,1.25805,1.24299,1.22794,1.21288,1.19782,1.18276,1.16771,1.15265,1.13759,1.12253,1.10747,1.09242,1.07736,1.0623,1.04724,1.03218,1.01713,1.00207,0.98701,0.971952,0.956894,0.941836,0.926778,0.91172,0.896662,0.881605,0.866547,0.851489,0.836431,0.821373,0.806315,0.791257,0.776199,0.761141,0.746083,0.731025,0.715967 };
//Arreglo de rotaciones en X para la animación por KeyFrames
float movLRX[570] = { -0.0140789,-0.0281579,-0.0422368,-0.0563158,-0.0703947,-0.0844737,-0.0985526,-0.112632,-0.126711,-0.140789,-0.154868,-0.168947,-0.183026,-0.197105,-0.211184,-0.225263,-0.239342,-0.253421,-0.2675,-0.281579,-0.295658,-0.309737,-0.323816,-0.337895,-0.351974,-0.366053,-0.380132,-0.39421,-0.408289,-0.422368,-0.436447,-0.450526,-0.464605,-0.478684,-0.492763,-0.506842,-0.520921,-0.535,-0.549079,-0.563158,-0.577237,-0.591316,-0.605395,-0.619474,-0.633553,-0.647632,-0.661711,-0.67579,-0.689869,-0.703948,-0.718027,-0.732106,-0.746185,-0.760264,-0.774343,-0.788422,-0.802501,-0.81658,-0.830658,-0.844737,-0.858816,-0.872895,-0.886974,-0.901053,-0.915132,-0.929211,-0.94329,-0.957369,-0.971448,-0.985527,-0.999606,-1.01369,-1.02776,-1.04184,-1.05592,-1.07,-1.08408,-1.09816,-1.11224,-1.12632,-1.1404,-1.15447,-1.16855,-1.18263,-1.19671,-1.21079,-1.22487,-1.23895,-1.25303,-1.26711,-1.28119,-1.29526,-1.30934,-1.32342,-1.3375,-1.35158,-1.36566,-1.37974,-1.39382,-1.4079,-1.42198,-1.43605,-1.45013,-1.46421,-1.47829,-1.49237,-1.50645,-1.52053,-1.53461,-1.54869,-1.56277,-1.57684,-1.59092,-1.605,-1.61908,-1.63316,-1.64724,-1.66132,-1.6754,-1.68948,-1.70355,-1.71763,-1.73171,-1.74579,-1.75987,-1.77395,-1.78803,-1.80211,-1.81619,-1.83027,-1.84434,-1.85842,-1.8725,-1.88658,-1.90066,-1.91474,-1.92882,-1.9429,-1.95698,-1.97106,-1.98513,-1.99921,-2.01329,-2.02737,-2.04145,-2.05553,-2.06961,-2.08369,-2.09777,-2.11184,-2.12592,-2.14,-2.15408,-2.16816,-2.18224,-2.19632,-2.2104,-2.22448,-2.23855,-2.25263,-2.26671,-2.28079,-2.29487,-2.30895,-2.32303,-2.33711,-2.35118,-2.36526,-2.37934,-2.39342,-2.4075,-2.42158,-2.43566,-2.44974,-2.46382,-2.47789,-2.49197,-2.50605,-2.52013,-2.53421,-2.54829,-2.56237,-2.57645,-2.59053,-2.6046,-2.61868,-2.63276,-2.64684,-2.66092,-2.675,-2.74496,-2.81491,-2.88487,-2.95483,-3.02479,-3.09475,-3.1647,-3.23466,-3.30462,-3.37458,-3.44454,-3.51449,-3.58445,-3.65441,-3.72437,-3.79433,-3.86428,-3.93424,-4.0042,-4.07416,-4.14412,-4.21407,-4.28403,-4.35399,-4.42395,-4.4939,-4.56386,-4.63382,-4.70378,-4.77374,-4.84369,-4.91365,-4.98361,-5.05357,-5.12352,-5.19348,-5.26344,-5.3334,-5.40335,-5.47331,-5.54327,-5.61323,-5.68319,-5.75314,-5.8231,-5.89306,-5.96302,-6.03297,-6.10293,-6.17289,-6.24285,-6.31281,-6.38276,-6.45272,-6.52268,-6.59264,-6.66259,-6.73255,-6.80251,-6.87247,-6.94242,-7.01238,-7.08234,-7.1523,-7.22226,-7.29221,-7.36217,-7.43213,-7.50209,-7.57204,-7.642,-7.71196,-7.78192,-7.85188,-7.92183,-7.99179,-8.06175,-8.13171,-8.20166,-8.27162,-8.34158,-8.41154,-8.48149,-8.55145,-8.62141,-8.69137,-8.76133,-8.83128,-8.90124,-8.9712,-9.04116,-9.11111,-9.18107,-9.25103,-9.32099,-9.39095,-9.4609,-9.53086,-9.60082,-9.67078,-9.74073,-9.81069,-9.88065,-9.95061,-10.0206,-10.0905,-10.1605,-10.2304,-10.3004,-10.3704,-10.4403,-10.5103,-10.5802,-10.6502,-10.7201,-10.7901,-10.8601,-10.93,-11,-11.0699,-11.1399,-11.2098,-11.2798,-11.3498,-11.4197,-11.4897,-11.5596,-11.6296,-11.6996,-11.7695,-11.8395,-11.9094,-11.9794,-12.0493,-12.1193,-12.1893,-12.2592,-12.3292,-12.3991,-12.4691,-12.539,-12.609,-12.679,-12.7489,-12.8189,-12.8888,-12.9588,-13.0287,-13.0987,-13.1687,-13.2386,-13.3086,-13.3785,-13.4485,-13.5185,-13.5884,-13.6584,-13.7283,-13.7983,-13.8682,-13.9382,-14.0082,-14.0781,-14.1481,-14.218,-14.288,-14.3579,-14.4279,-14.4979,-14.5678,-14.6378,-14.7077,-14.7777,-14.8476,-14.9176,-14.9876,-15.0575,-15.1275,-15.1974,-15.2674,-15.3374,-15.4073,-15.4773,-15.5472,-15.6172,-15.6871,-15.7571,-15.8271,-15.897,-15.967,-17.7777,-19.5884,-21.3991,-23.2098,-25.0205,-26.8312,-28.6419,-30.4526,-32.2633,-34.074,-35.8847,-37.6954,-39.5061,-41.3168,-43.1275,-44.9382,-46.7489,-48.5596,-50.3703,-52.181,-53.9917,-55.8024,-57.6131,-59.4238,-61.2345,-63.0452,-64.8559,-66.6666,-68.4773,-70.288,-72.0987,-73.9094,-75.7201,-77.5308,-79.3415,-81.1522,-82.9629,-84.7736,-86.5843,-88.395,-90.2057,-92.0163,-93.827,-95.6377,-97.4484,-99.2591,-101.07,-102.881,-104.691,-106.502,-108.313,-110.123,-111.934,-113.745,-115.555,-117.366,-119.177,-120.988,-122.798,-124.609,-126.42,-128.23,-130.041,-131.852,-133.662,-135.473,-137.284,-139.095,-140.905,-142.716,-144.527,-146.337,-148.148,-149.959,-151.769,-153.58,-155.391,-157.202,-159.012,-160.823,-162.634,-164.444,-166.255,-168.066,-169.876,-171.687,-173.498,-175.309,-177.119,-178.93,-180.741,-182.551,-184.362,-186.173,-187.983,-189.794,-191.605,-193.416,-195.226,-197.037,-198.848,-200.658,-202.469,-204.28,-206.09,-207.901,-209.712,-211.523,-213.333,-215.144,-216.955,-218.765,-220.576,-222.387,-224.197,-226.008,-227.819,-229.63,-231.44,-233.251,-235.062,-236.872,-238.683,-240.494,-242.304,-244.115,-245.926,-247.737,-249.547,-251.358,-253.169,-254.979,-256.79,-258.601,-260.411,-262.222,-264.033,-265.844,-267.654,-269.465,-271.276,-273.086,-274.897,-276.708,-278.518,-280.329,-282.14,-283.951,-285.761,-287.572,-289.383,-291.193,-293.004,-294.815,-296.625,-298.436,-300.247,-302.057,-303.868,-305.679,-307.49,-309.3,-311.111,-312.922,-314.732,-316.543,-318.354,-320.164,-321.975,-323.786,-325.597,-327.407,-329.218,-331.029,-332.839,-334.65,-336.461,-338.271,-340.082,-341.893,-343.704,-345.514,-347.325,-349.136,-350.946,-352.757,-354.568,-356.378,-358.189,-360 };
//Posiciones y rotación originales del libro
float posY_Libro = 3.645f;
float posX_Libro = -3.58f;
float rotX_Libro = 0;

int i = 0, h = 0;			//Contadores para recorrer los arreglos



// Positions of the point lights
glm::vec3 pointLightPositions[] = {
	glm::vec3(-5, 4.31f, 7.0f),						//Luz de habitacion principal
	glm::vec3(2, 4.31f, -6.0f)						//Luz de la cocina
};

float vertices[] = {								//Arreglo de vertices para formar cubos
	 -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
		0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
		0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
		0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	   -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	   -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,

	   -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
	   -0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
	   -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,

	   -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
	   -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	   -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	   -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	   -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
	   -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,

		0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
		0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
		0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
		0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,

	   -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
		0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	   -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	   -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,

	   -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
		0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	   -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	   -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f
};

//Vectores para controlar la propiedad ambiental y difusa de las luces
glm::vec3 Light1 = glm::vec3(0);
glm::vec3 Light2 = glm::vec3(0);
//glm::vec3 Light3 = glm::vec3(0);
//glm::vec3 Light4 = glm::vec3(0);
//glm::vec3 Light5 = glm::vec3(0);

// Deltatime
GLfloat deltaTime = 0.0f;	// Time between current frame and last frame
GLfloat lastFrame = 0.0f;  	// Time of last frame

int main()
{
	// Init GLFW
	glfwInit();
	
	/*
	// Set all the required options for GLFW
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);*/

	// Create a GLFWwindow object that we can use for GLFW's functions
	GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "TSEH_Proyecto Final", nullptr, nullptr);

	if (nullptr == window)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();

		return EXIT_FAILURE;
	}

	glfwMakeContextCurrent(window);

	glfwGetFramebufferSize(window, &SCREEN_WIDTH, &SCREEN_HEIGHT);

	// Set the required callback functions
	glfwSetKeyCallback(window, KeyCallback);
	glfwSetCursorPosCallback(window, MouseCallback);

	// GLFW Options
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	// Set this to true so GLEW knows to use a modern approach to retrieving function pointers and extensions
	glewExperimental = GL_TRUE;
	// Initialize GLEW to setup the OpenGL Function pointers
	if (GLEW_OK != glewInit())
	{
		std::cout << "Failed to initialize GLEW" << std::endl;
		return EXIT_FAILURE;
	}

	// Define the viewport dimensions
	glViewport(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

	//Shader
	Shader lightingShader("Shaders/lighting.vs", "Shaders/lighting.frag");
	Shader lampShader("Shaders/lamp.vs", "Shaders/lamp.frag");
	
	//Carga de modelos
	//Primer cuarto
	Model lamp((char*)"Models/Lampara/LampV2.obj");
	Model FocoL((char*)"Models/Lampara/FocoLamp.obj");

	Model comoda((char*)"Models/Comoda/Mesa.obj");
	Model cajon((char*)"Models/Comoda/mesaCajon.obj");

	Model MesaTV((char*)"Models/MesaTV/MEsaTV.obj");
	Model pelota((char*)"Models/Pelota/pelota.obj");

	Model Ropero((char*)"Models/Ropero/Ropero.obj");
	Model RoperoPuerta((char*)"Models/Ropero/RoperoPuerta.obj");
	Model caja((char*)"Models/Ropero/cajaTenis.obj");

	Model Estante((char*)"Models/Estante/EstanteF.obj");
	Model EstanteBandeja((char*)"Models/Estante/EstanteBamdeja.obj");
	Model disco((char*)"Models/Disco/disco.obj");
	Model libro((char*)"Models/Libro/libro1.obj");

	Model cama((char*)"Models/Cama/cama.obj");
	
	Model casa((char*)"Models/Casa/casa.obj");

	Model ventanas((char*)"Models/Casa/ventanas.obj");
	Model PuertaEntrada((char*)"Models/Casa/puertaEntrada.obj");
	Model PuertaCuarto((char*)"Models/Casa/puertaCuarto.obj");
	Model cortinas((char*)"Models/Cortinas/cortinas.obj");

	//Segundo cuarto
	Model MueblesC((char*)"Models/MueblesCocina/MueblesV1.obj");

	Model LavaPlatos((char*)"Models/LavaPlatos/lavaPlatos.obj");

	Model Estufa((char*)"Models/Estufa/estufa.obj");

	Model Refri((char*)"Models/Refrigerador/refrigerador.obj");


	Model Microondas((char*)"Models/Microondas/microondas.obj");




	// First, set the container's VAO (and VBO)
	GLuint VBO, VAO;
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	glBindVertexArray(VAO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	// Position attribute
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);
	glEnableVertexAttribArray(0);
	// normal attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	// Set texture units
	lightingShader.Use();
	glUniform1i(glGetUniformLocation(lightingShader.Program, "material.diffuse"), 0);
	glUniform1i(glGetUniformLocation(lightingShader.Program, "material.specular"), 1);

	glm::mat4 projection = glm::perspective(camera.GetZoom(), (GLfloat)SCREEN_WIDTH / (GLfloat)SCREEN_HEIGHT, 0.1f, 100.0f);

	// Game loop
	while (!glfwWindowShouldClose(window))
	{

		// Calculate deltatime of current frame
		GLfloat currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions
		glfwPollEvents();
		DoMovement();

		// Clear the colorbuffer
		glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// OpenGL options
		glEnable(GL_DEPTH_TEST);

		// Use cooresponding shader when setting uniforms/drawing objects
		lightingShader.Use();
		GLint viewPosLoc = glGetUniformLocation(lightingShader.Program, "viewPos");
		glUniform3f(viewPosLoc, camera.GetPosition().x, camera.GetPosition().y, camera.GetPosition().z);


		// Directional light
		glUniform3f(glGetUniformLocation(lightingShader.Program, "dirLight.direction"), -20.0f, 30.0f, -20.3f);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "dirLight.ambient"), 0.5f, 0.5f, 0.5f);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "dirLight.diffuse"), 0.1f, 0.1f, 0.1f);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "dirLight.specular"), 0.1f, 0.1f, 0.1f);


		// Point light 1
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[0].position"), pointLightPositions[0].x, pointLightPositions[0].y, pointLightPositions[0].z);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[0].ambient"), Light1.x, Light1.y, Light1.z);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[0].diffuse"), Light1.x, Light1.y, Light1.z);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[0].specular"), 0.0f, 0.0f, 0.0f);
		glUniform1f(glGetUniformLocation(lightingShader.Program, "pointLights[0].constant"), 1.0f);
		glUniform1f(glGetUniformLocation(lightingShader.Program, "pointLights[0].linear"), 0.22f);
		glUniform1f(glGetUniformLocation(lightingShader.Program, "pointLights[0].quadratic"), 0.20f);

		// Point light 2
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[1].position"), pointLightPositions[1].x, pointLightPositions[1].y, pointLightPositions[1].z);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[1].ambient"), Light2.x, Light2.y, Light2.z);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[1].diffuse"), Light2.x, Light2.y, Light2.z);
		glUniform3f(glGetUniformLocation(lightingShader.Program, "pointLights[1].specular"), 0.0f, 0.0f, 0.0f);
		glUniform1f(glGetUniformLocation(lightingShader.Program, "pointLights[1].constant"), 1.0f);
		glUniform1f(glGetUniformLocation(lightingShader.Program, "pointLights[1].linear"), 0.22f);
		glUniform1f(glGetUniformLocation(lightingShader.Program, "pointLights[1].quadratic"), 0.20f);


		// Set material properties
		glUniform1f(glGetUniformLocation(lightingShader.Program, "material.shininess"), 22.0f); //Brillo del objeto

		// Create camera transformations
		glm::mat4 view;
		view = camera.GetViewMatrix();

		// Get the uniform locations
		GLint modelLoc = glGetUniformLocation(lightingShader.Program, "model");
		GLint viewLoc = glGetUniformLocation(lightingShader.Program, "view");
		GLint projLoc = glGetUniformLocation(lightingShader.Program, "projection");

		// Pass the matrices to the shader
		glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));

		glm::mat4 model(1);
		glBindVertexArray(0);

		//Carga de modelos
		
		//Casa: paredes, suelos, marcos, techos y puertas no moviles.
		model = glm::mat4(1);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		casa.Draw(lightingShader);



		//Puerta de la entrada
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-1.544f, 2.272f, 7.986f));		
		model = glm::rotate(model, glm::radians(rotP1), glm::vec3(0.0f, 1.0f, 0.0f));		//Animación 0
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		PuertaEntrada.Draw(lightingShader);
		glBindVertexArray(0);


		//Puerta de la habitación
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-2.936f, 2.273f, 5.254f));
		model = glm::rotate(model, glm::radians(rotP2), glm::vec3(0.0f, 1.0f, 0.0f));		//Animación 0
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		PuertaCuarto.Draw(lightingShader);
		glBindVertexArray(0);

		//Lampara habitación
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-5.0f, 4.31f, 7.0f));
		model = glm::scale(model, glm::vec3(0.34f, 0.34f, 0.34f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		lamp.Draw(lightingShader);
		glBindVertexArray(0);

		//Comoda de la habitación
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-6.377f, 1.239f, 7.2f));
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::scale(model, glm::vec3(0.5f, 0.5f, 0.5f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		comoda.Draw(lightingShader);
		glBindVertexArray(0);

		//Cajon de comoda
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(posX_Cajon, 1.239f, 7.2f));					//Animación 3
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::scale(model, glm::vec3(0.5f, 0.5f, 0.5f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		cajon.Draw(lightingShader);
		glBindVertexArray(0);

		//Mesa de TV
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-3.385f, 1.268f, 8.764f));		
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::scale(model, glm::vec3(0.3f, 0.35f, 0.35f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		MesaTV.Draw(lightingShader);
		glBindVertexArray(0);

		//Pelota en la mesa de TV
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-3.428f, posY_Pelota, posZ_Pelota));		//Animación 4 (compleja)
		model = glm::rotate(model, glm::radians(rotX_Pelota), glm::vec3(1.0f, 0.0f, 0.0f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		pelota.Draw(lightingShader);
		glBindVertexArray(0);
		
		//Ropero 
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-6.22f, 2.151f, 6.502f));		
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::scale(model, glm::vec3(0.35f, 0.35f, 0.35f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 1);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		Ropero.Draw(lightingShader);
		glBindVertexArray(0);

		//Puerta del ropero
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-6.22f, 2.151f, 6.502f));
		model = glm::rotate(model, glm::radians(rotR), glm::vec3(0.0f, 1.0f, 0.0f));		//Animación 1
		model = glm::scale(model, glm::vec3(0.35f, 0.35f, 0.35f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 1);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		RoperoPuerta.Draw(lightingShader);
		glBindVertexArray(0);

		//Caja de zapatos en ropero
		model = glm::mat4(1);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));		
		model = glm::translate(model, glm::vec3(posX_R, posY_R, 6.15f));					//Animación 1
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 1);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		caja.Draw(lightingShader);
		glBindVertexArray(0);

			
		//Estante con libros y reproductor
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-3.5f, 2.7f, 7.9f));
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::scale(model, glm::vec3(0.4f, 0.5f, 0.5f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		Estante.Draw(lightingShader);
		glBindVertexArray(0);

		//Bandeja de entrada del reproductor
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(rad_X, 2.7f, 7.9f));							//Animación 2
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::scale(model, glm::vec3(0.4f, 0.5f, 0.43f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);		
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		EstanteBandeja.Draw(lightingShader);
		glBindVertexArray(0);

		//Disco de la bandeja del reproductor
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(disc_X, 2.708f, 7.902f));
		model = glm::rotate(model, glm::radians(disc_rot), glm::vec3(0.0f, 1.0f, 0.0f));		//Animación 2
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		disco.Draw(lightingShader);
		glBindVertexArray(0);

		//Libro en el estante
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(posX_Libro, posY_Libro, 6.9f));					//Animación 5 (Compleja)
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::rotate(model, glm::radians(rotX_Libro), glm::vec3(1.0f, 0.0f, 0.0f));			
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		libro.Draw(lightingShader);
		glBindVertexArray(0);

		//Cama		
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-5.197f, 0.6f, 8.742f));
		model = glm::scale(model, glm::vec3(0.9f, 1.1f, 1.0f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		cama.Draw(lightingShader);
		glBindVertexArray(0);

		//Cortinas 1
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-5.105f, 2.259f, 9.715f));
		model = glm::rotate(model, glm::radians(180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		cortinas.Draw(lightingShader);
		glBindVertexArray(0);

		//Cortinas 2
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(-6.815f, 2.259f, 7.821f));
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);		
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		cortinas.Draw(lightingShader);
		glBindVertexArray(0);


		//Muebles de la cocina		
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(2.708f, 1.34f, -8.112f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		MueblesC.Draw(lightingShader);
		glBindVertexArray(0);


		//Lava platos	
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(2.708f, 1.34f, -8.112f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		LavaPlatos.Draw(lightingShader);
		glBindVertexArray(0);

		//Estufa	
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(2.708f, 1.34f, -8.112f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		Estufa.Draw(lightingShader);
		glBindVertexArray(0);

		//Refrigerador	
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(2.708f, 1.34f, -8.112f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		Refri.Draw(lightingShader);
		glBindVertexArray(0);

		//Microondas	
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(2.708f, 1.34f, -8.112f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		Microondas.Draw(lightingShader);
		glBindVertexArray(0);

		//Cortinas 3
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(3.294f, 2.829f, -8.243f));
		model = glm::scale(model, glm::vec3(0.989f, 0.621f, 1.058f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		cortinas.Draw(lightingShader);
		glBindVertexArray(0);

		//Lampara cocina
		model = glm::mat4(1);
		model = glm::translate(model, glm::vec3(2.0f, 4.31f, -6.0f));
		model = glm::scale(model, glm::vec3(0.34f, 0.34f, 0.34f));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 0);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 5.0);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		lamp.Draw(lightingShader);
		glBindVertexArray(0);


		//Ventanas con transparencia
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		model = glm::mat4(1);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		glUniform1i(glGetUniformLocation(lightingShader.Program, "activaTransparencia"), 1);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 0.60);
		ventanas.Draw(lightingShader);
		glDisable(GL_BLEND);
		glUniform4f(glGetUniformLocation(lightingShader.Program, "colorAlpha"), 1.0, 1.0, 1.0, 1.0);
		glBindVertexArray(0);


		//For the light bulb in the lamp object
		//Shader de uso exclusivo para iluminación

		//Habitacion principal
		lampShader.Use();

		// Get location objects for the matrices on the lamp shader
		modelLoc = glGetUniformLocation(lampShader.Program, "model");
		viewLoc = glGetUniformLocation(lampShader.Program, "view");
		projLoc = glGetUniformLocation(lampShader.Program, "projection");

		glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));
		model = glm::mat4(1);		
		model = glm::translate(model, lightPos);
		model = glm::translate(model, pointLightPositions[0]);				//Habitación
		model = glm::scale(model, glm::vec3(0.3f));
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		FocoL.Draw(lampShader);
		glBindVertexArray(0);

		//Cocina
		lampShader.Use();

		// Get location objects for the matrices on the lamp shader
		modelLoc = glGetUniformLocation(lampShader.Program, "model");
		viewLoc = glGetUniformLocation(lampShader.Program, "view");
		projLoc = glGetUniformLocation(lampShader.Program, "projection");

		glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));
		model = glm::mat4(1);
		model = glm::translate(model, lightPos);
		model = glm::translate(model, pointLightPositions[1]);				//Habitación
		model = glm::scale(model, glm::vec3(0.3f));
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		FocoL.Draw(lampShader);
		glBindVertexArray(0);

		// Swap the screen buffers
		glfwSwapBuffers(window);
	}

	// Terminate GLFW, clearing any resources allocated by GLFW.
	glfwTerminate();

	return 0;
}

// Moves/alters the camera positions based on user input
void DoMovement()
{

	// Camera controls
	if (keys[GLFW_KEY_W] || keys[GLFW_KEY_UP])
	{
		camera.ProcessKeyboard(FORWARD, deltaTime);

	}

	if (keys[GLFW_KEY_S] || keys[GLFW_KEY_DOWN])
	{
		camera.ProcessKeyboard(BACKWARD, deltaTime);


	}

	if (keys[GLFW_KEY_A] || keys[GLFW_KEY_LEFT])
	{
		camera.ProcessKeyboard(LEFT, deltaTime);


	}

	if (keys[GLFW_KEY_D] || keys[GLFW_KEY_RIGHT])
	{
		camera.ProcessKeyboard(RIGHT, deltaTime);


	}
	//Animacion Extra, puertas entrada y pasillo
	if (animS1 and closeD){					//Apertura de puertas
		if (rotP1 < 85){					//Rotación de las puertas
			rotP1 += 1.0f;					
		}
		if (rotP2 > -85){
			rotP2 -= 1.0f;
		}
		if (rotP2 == -85 and rotP1 == 85){	//Puertas abiertas
			openD = true;					
			closeD = false;
			animS1 = false;
		}
	}
	if (animS1 and openD) {					//Cierre de puertas
		if (rotP1 > 0) {					//Rotación de las puertas
			rotP1 -= 1.0f;
		}
		if (rotP2 < 0) {
			rotP2 += 1.0f;
		}
		if (rotP2 == 0 and rotP1 == 0) {	//Puertas cerradas
			openD = false;
			closeD = true;
			animS1 = false;
		}
	}

	//animaciones Objetos
	//1.- Ropero + caja  (Sencilla)
	if (animS2 and closeR) {				//Puerta del ropero cerrada
		if (rotR > 10) {					//Inicia, apertura de puerta
			rotR -= 0.5;
		}
		if (rotR == 10) {					//Puerta abierta
			if (rec1) {						//Caja sale
				posX_R += 0.01f;
				if (posX_R > -5.8f) {		//Termina de salir, primer recorrido terminado
					rec1 = false;
					rec2 = true;
				}
			}	
			if (rec2) {						//Segudno recorrido: Caja baja
				posY_R -= 0.01f;
				if (posY_R < 0.97f) {		//Termina de bajar, segndo recorrido terminado
					posY_R -= 0.01f;
					rec2 = false;
					rec3 = true;
				}
			}
			if (rec3) {						//Tercer recorrido: Caja entra abajo
				posX_R -= 0.01f;
				if (posX_R < -6.6f) {		//Termina de entrar, tercer recorrido terminado
					rec3 = false;
					recR1 = true;
					openR = true;
					closeR = false;
					animS2 = false;
				}
			}			
		}
	}
	if (animS2 and openR) {					//Puerta abierta, caja abajo
		if (recR1) {						//Caja salde
			posX_R += 0.01f;
			if (posX_R > -5.8f) {
				recR1 = false;				//Cuarto recorrido terminado
				recR2 = true;
			}
		}
		if (recR2) {						//Quinto recorrido: Caja sube
			posY_R += 0.01f;
			if (posY_R > 3.0f) {
				posY_R += 0.01f;
				recR2 = false;
				recR3 = true;
			}
		}
		if (recR3) {						//Sexto recorrido: Caja entra arriba
			if (posX_R > -6.5f) {
				posX_R -= 0.01f;
			}
			else
			{
				if (rotR < 90) {			//Cierre de puerta
					rotR += 0.5;
				}
				if (rotR == 90)
				{
					recR3 = false;
					rec1 = true;
					openR = false;
					closeR = true;
					animS2 = false;			//Fin de animación
				}
			}

		}
	}
	//2.- Disco (Sencilla)
	if (animS3 and closeRad){				//Disco y bandeja dentro
		if (disc_X > -3.632f) {
			disc_X -= 0.001f;				//Disco sale
		}
		if (rad_X > -3.5f) {				//Bandeja sale
			rad_X -= 0.001f;
		}
		if (disc_rot < 360)	{
			disc_rot += 1.6;				//Disco gira mientras sale
		}
		if (disc_X < -3.632f and rad_X < -3.5f){
			closeRad = false;
			animS3 = false;
			openRad = true;					//Disco y bandeja fuera
			disc_rot = 0.0;
		}
	}
	if (animS3 and openRad) {				//Disco y bandeja fuera
		if (disc_X < -3.417f) {
			disc_X += 0.001f;				//Disco sale
		}
		if (rad_X < -3.285f) {
			rad_X += 0.001f;				//Bandeja sale
		}
		if (disc_X == -3.417f or rad_X == -3.285f) {
			closeRad = true;
			animS3 = false;
			openRad = false;
			disc_rot = 0.0;					//Disco y bandeja nuevamente dentro
		}
	}

	//3.- Cajón (Sencilla)
	if (animS4 and closeCom){				//Cajón cerrado
		if (posX_Cajon < -6.07f) {
			posX_Cajon += 0.01f;			//Apertura del cajón
		}
		if (posX_Cajon > -6.07f){			//Cajón abierto por completo
			closeCom = false;
			openCom = true;
			animS4 = false;
		}
	}
	if (animS4 and openCom) {				//Cajon abierto
		if (posX_Cajon > -6.377f) {			//Cerrado del cajón
			posX_Cajon -= 0.01f;
		}
		if (posX_Cajon == -6.377f) {		//Cajón cerrado de nuevo
			closeCom = true;
			openCom = false;
			animS4 = false;
		}
	}

	//4.- Pelota (Compleja)
	if (animC1 and P_rec1) {
		if (i < 2090){						
			posY_Pelota = movPY[i];			//Desplazamiento por el arreglo de KeyFrames, posición de Y
			posZ_Pelota = movPZ[i];			//Desplazamiento por el arreglo de KeyFrames, posición de Z
			rotX_Pelota = rotPX[i];			//Desplazamiento por el arreglo de KeyFrames, rotación de X
			
		}
		if (i >= 2089)	{					//Fin de animación
			posY_Pelota = 0.736f;			//Valores originales
			posZ_Pelota = 7.0f;
			rotX_Pelota = -405;
			animC1 = false;					//Primer parte terminada
			P_rec1 = false;
			P_rec2 = true;
			i = 0;							//Reinicio a cero del incrementador
		}
		i = i + 7;							//El valor de "i" modifica la velocidad a la que se recorren los arreglos, aumentando
											// su valor en cada ejecución, la animación tendra menos frames y será más rapida, 
											//caso contrario, si se decrementa la animación será mas detallada y más lenta
	}
	if (animC1 and P_rec2) {				//Corrimientos en Y y Z para regresar la pelota al punto de partida
		if (posY_Pelota < 1.908f) {
			posY_Pelota += 0.01f;			//Regreso en Y
		}
		if (posY_Pelota > 1.907f) {
			rotX_Pelota = 0;				//Rotación en X
			if (posZ_Pelota < 7.681f) {
				posZ_Pelota += 0.01f;		//Regreso en Z
			}
			if (posZ_Pelota > 7.680f)
			{
				animC1 = false;				//Pelota regresa a la posición original
				P_rec1 = true;
				P_rec2 = false;
			}
		}

	}

	//5.- Libro (Compleja)
	if (animC2 and L_rec1) {				//Libro arriba de la estanteria
		if (h < 570) {
			posY_Libro = movLY[h];			//Corrimiento a lo largo del arreglo de posiciones
			posX_Libro = movLX[h];			//en Y, X y rotación en X
			rotX_Libro = movLRX[h];
		}
		if (h == 569) {						//En el ultimo cuadro del arreglo, se setean los alores a una
			posY_Libro = 0.716;				//posición final y se termina la animación por keyFrames del libro
			posX_Libro = -4.164f;
			rotX_Libro = -360;			
			animC2 = false;
			L_rec1 = false;
			L_rec2 = true;
			h = 0;							//Reinicio del contador
		}
		h++;								//Contador para recorrer uno a uno los frames guardados
	}

	if (animC2 and L_rec2) {				//Recorrido para regresar el libro al estante
		if (posY_Libro < 3.645) {
			posY_Libro += 0.01f;			//Regresa en el eje Y
		}
		if (posY_Libro > 3.644) {
			rotX_Libro = 0;					//Rotación original
			if (posX_Libro < -3.58) {
				posX_Libro += 0.01f;		//Regresa en el eje X
			}
			if (posX_Libro > -3.59)
			{
				animC2 = false;				//Animación 5 terminada
				L_rec1 = true;
				L_rec2 = false;
			}
		}

	}


}


// Is called whenever a key is pressed/released via GLFW
void KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
	if (GLFW_KEY_ESCAPE == key && GLFW_PRESS == action)
	{
		glfwSetWindowShouldClose(window, GL_TRUE);
	}

	if (key >= 0 && key < 1024)
	{
		if (action == GLFW_PRESS)
		{
			keys[key] = true;
		}
		else if (action == GLFW_RELEASE)
		{
			keys[key] = false;
		}
	}
	//Animacion Extra, puertas entrada y pasillo
	if (keys[GLFW_KEY_1])
	{
		animS1 = true;
	}
	//1.- Ropero + caja  (Sencilla)
	if (keys[GLFW_KEY_2])
	{
		animS2 = !animS2;
	}
	//2.- Disco (Sencilla)
	if (keys[GLFW_KEY_3])
	{
		animS3 = !animS3;
	}
	//3.- Cajón (Sencilla)
	if (keys[GLFW_KEY_4])
	{
		animS4 = !animS4;
	}
	//4.- Pelota (Compleja)
	if (keys[GLFW_KEY_5])
	{
		animC1 = !animC1;
	}
	//5.- Libro (Compleja)
	if (keys[GLFW_KEY_6])
	{
		animC2 = !animC2;
	}
	//Activacion e intencidad de los focos
	if (keys[GLFW_KEY_7])
	{
		active = !active;
		if (active)
		{
			Light1 = glm::vec3(0.5f, 0.5f, 0.4f);
			Light2 = glm::vec3(0.5f, 0.5f, 0.4f);
		}
		else
		{
			Light1 = glm::vec3(0);
			Light2 = glm::vec3(0);
		}
	}

}

void MouseCallback(GLFWwindow* window, double xPos, double yPos)
{
	if (firstMouse)
	{
		lastX = xPos;
		lastY = yPos;
		firstMouse = false;
	}

	GLfloat xOffset = xPos - lastX;
	GLfloat yOffset = lastY - yPos;  // Reversed since y-coordinates go from bottom to left

	lastX = xPos;
	lastY = yPos;

	camera.ProcessMouseMovement(xOffset, yOffset);
}